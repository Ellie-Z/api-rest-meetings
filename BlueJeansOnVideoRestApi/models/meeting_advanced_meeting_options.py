# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 4 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to perform operations. * Password Credentials Grant – Authenticate with a username and password and receive an access token with user level permission. Known as two-legged OAuth. * Meeting Credentials Grant – Authenticate with a meeting ID and meeting passcode and receive an access token with meeting level permission. Known as two-legged OAuth. * Client Credentials Grant –  Authenticate with a client ID and client secret and receive an access token with enterprise level permission. Known as two-legged OAuth. * Authorization Code Grant – After creating a developer application, users witll authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access token. Known as three-legged OAuth. ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – Scope of APIs is limited to individual meetings. * User-level – Scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users. All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MeetingAdvancedMeetingOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, auto_record=None, mute_participants_on_entry=None, encryption_type=None, moderator_less=None, video_best_fit=None, disallow_chat=None, publish_meeting=None, show_all_attendees_in_meeting_invite=None):
        """
        MeetingAdvancedMeetingOptions - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'auto_record': 'bool',
            'mute_participants_on_entry': 'bool',
            'encryption_type': 'str',
            'moderator_less': 'bool',
            'video_best_fit': 'bool',
            'disallow_chat': 'bool',
            'publish_meeting': 'bool',
            'show_all_attendees_in_meeting_invite': 'bool'
        }

        self.attribute_map = {
            'auto_record': 'autoRecord',
            'mute_participants_on_entry': 'muteParticipantsOnEntry',
            'encryption_type': 'encryptionType',
            'moderator_less': 'moderatorLess',
            'video_best_fit': 'videoBestFit',
            'disallow_chat': 'disallowChat',
            'publish_meeting': 'publishMeeting',
            'show_all_attendees_in_meeting_invite': 'showAllAttendeesInMeetingInvite'
        }

        self._auto_record = auto_record
        self._mute_participants_on_entry = mute_participants_on_entry
        self._encryption_type = encryption_type
        self._moderator_less = moderator_less
        self._video_best_fit = video_best_fit
        self._disallow_chat = disallow_chat
        self._publish_meeting = publish_meeting
        self._show_all_attendees_in_meeting_invite = show_all_attendees_in_meeting_invite

    @property
    def auto_record(self):
        """
        Gets the auto_record of this MeetingAdvancedMeetingOptions.

        :return: The auto_record of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._auto_record

    @auto_record.setter
    def auto_record(self, auto_record):
        """
        Sets the auto_record of this MeetingAdvancedMeetingOptions.

        :param auto_record: The auto_record of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._auto_record = auto_record

    @property
    def mute_participants_on_entry(self):
        """
        Gets the mute_participants_on_entry of this MeetingAdvancedMeetingOptions.

        :return: The mute_participants_on_entry of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._mute_participants_on_entry

    @mute_participants_on_entry.setter
    def mute_participants_on_entry(self, mute_participants_on_entry):
        """
        Sets the mute_participants_on_entry of this MeetingAdvancedMeetingOptions.

        :param mute_participants_on_entry: The mute_participants_on_entry of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._mute_participants_on_entry = mute_participants_on_entry

    @property
    def encryption_type(self):
        """
        Gets the encryption_type of this MeetingAdvancedMeetingOptions.

        :return: The encryption_type of this MeetingAdvancedMeetingOptions.
        :rtype: str
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """
        Sets the encryption_type of this MeetingAdvancedMeetingOptions.

        :param encryption_type: The encryption_type of this MeetingAdvancedMeetingOptions.
        :type: str
        """
        allowed_values = ["NO_ENCRYPTION", "ENCRYPTED_ONLY", "ENCRYPTED_OR_PSTN_ONLY"]
        if encryption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_type` ({0}), must be one of {1}"
                .format(encryption_type, allowed_values)
            )

        self._encryption_type = encryption_type

    @property
    def moderator_less(self):
        """
        Gets the moderator_less of this MeetingAdvancedMeetingOptions.

        :return: The moderator_less of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._moderator_less

    @moderator_less.setter
    def moderator_less(self, moderator_less):
        """
        Sets the moderator_less of this MeetingAdvancedMeetingOptions.

        :param moderator_less: The moderator_less of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._moderator_less = moderator_less

    @property
    def video_best_fit(self):
        """
        Gets the video_best_fit of this MeetingAdvancedMeetingOptions.

        :return: The video_best_fit of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._video_best_fit

    @video_best_fit.setter
    def video_best_fit(self, video_best_fit):
        """
        Sets the video_best_fit of this MeetingAdvancedMeetingOptions.

        :param video_best_fit: The video_best_fit of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._video_best_fit = video_best_fit

    @property
    def disallow_chat(self):
        """
        Gets the disallow_chat of this MeetingAdvancedMeetingOptions.

        :return: The disallow_chat of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._disallow_chat

    @disallow_chat.setter
    def disallow_chat(self, disallow_chat):
        """
        Sets the disallow_chat of this MeetingAdvancedMeetingOptions.

        :param disallow_chat: The disallow_chat of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._disallow_chat = disallow_chat

    @property
    def publish_meeting(self):
        """
        Gets the publish_meeting of this MeetingAdvancedMeetingOptions.

        :return: The publish_meeting of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._publish_meeting

    @publish_meeting.setter
    def publish_meeting(self, publish_meeting):
        """
        Sets the publish_meeting of this MeetingAdvancedMeetingOptions.

        :param publish_meeting: The publish_meeting of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._publish_meeting = publish_meeting

    @property
    def show_all_attendees_in_meeting_invite(self):
        """
        Gets the show_all_attendees_in_meeting_invite of this MeetingAdvancedMeetingOptions.

        :return: The show_all_attendees_in_meeting_invite of this MeetingAdvancedMeetingOptions.
        :rtype: bool
        """
        return self._show_all_attendees_in_meeting_invite

    @show_all_attendees_in_meeting_invite.setter
    def show_all_attendees_in_meeting_invite(self, show_all_attendees_in_meeting_invite):
        """
        Sets the show_all_attendees_in_meeting_invite of this MeetingAdvancedMeetingOptions.

        :param show_all_attendees_in_meeting_invite: The show_all_attendees_in_meeting_invite of this MeetingAdvancedMeetingOptions.
        :type: bool
        """

        self._show_all_attendees_in_meeting_invite = show_all_attendees_in_meeting_invite

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MeetingAdvancedMeetingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
