<?php
/**
 * RecordingRecordingSessions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans onVideo REST API
 *
 * _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authorize button up in the header to store the token. Each BlueJeans API called after that will use the access token provided.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RecordingRecordingSessions Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RecordingRecordingSessions implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Recording_recordingSessions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'content_status' => 'string',
        'recording_type' => 'string',
        'content_id' => 'int',
        'thumbnail_url' => 'string',
        'start_time_offset' => 'int',
        'end_time_offset' => 'int',
        'duration' => 'int',
        'started_by' => '\Swagger\Client\Model\RecordingStartedBy',
        'stopped_by' => '\Swagger\Client\Model\RecordingStartedBy'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'content_status' => 'contentStatus',
        'recording_type' => 'recordingType',
        'content_id' => 'contentId',
        'thumbnail_url' => 'thumbnailUrl',
        'start_time_offset' => 'startTimeOffset',
        'end_time_offset' => 'endTimeOffset',
        'duration' => 'duration',
        'started_by' => 'startedBy',
        'stopped_by' => 'stoppedBy'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'content_status' => 'setContentStatus',
        'recording_type' => 'setRecordingType',
        'content_id' => 'setContentId',
        'thumbnail_url' => 'setThumbnailUrl',
        'start_time_offset' => 'setStartTimeOffset',
        'end_time_offset' => 'setEndTimeOffset',
        'duration' => 'setDuration',
        'started_by' => 'setStartedBy',
        'stopped_by' => 'setStoppedBy'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'content_status' => 'getContentStatus',
        'recording_type' => 'getRecordingType',
        'content_id' => 'getContentId',
        'thumbnail_url' => 'getThumbnailUrl',
        'start_time_offset' => 'getStartTimeOffset',
        'end_time_offset' => 'getEndTimeOffset',
        'duration' => 'getDuration',
        'started_by' => 'getStartedBy',
        'stopped_by' => 'getStoppedBy'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['content_status'] = isset($data['content_status']) ? $data['content_status'] : null;
        $this->container['recording_type'] = isset($data['recording_type']) ? $data['recording_type'] : null;
        $this->container['content_id'] = isset($data['content_id']) ? $data['content_id'] : null;
        $this->container['thumbnail_url'] = isset($data['thumbnail_url']) ? $data['thumbnail_url'] : null;
        $this->container['start_time_offset'] = isset($data['start_time_offset']) ? $data['start_time_offset'] : null;
        $this->container['end_time_offset'] = isset($data['end_time_offset']) ? $data['end_time_offset'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['started_by'] = isset($data['started_by']) ? $data['started_by'] : null;
        $this->container['stopped_by'] = isset($data['stopped_by']) ? $data['stopped_by'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets content_status
     * @return string
     */
    public function getContentStatus()
    {
        return $this->container['content_status'];
    }

    /**
     * Sets content_status
     * @param string $content_status
     * @return $this
     */
    public function setContentStatus($content_status)
    {
        $this->container['content_status'] = $content_status;

        return $this;
    }

    /**
     * Gets recording_type
     * @return string
     */
    public function getRecordingType()
    {
        return $this->container['recording_type'];
    }

    /**
     * Sets recording_type
     * @param string $recording_type
     * @return $this
     */
    public function setRecordingType($recording_type)
    {
        $this->container['recording_type'] = $recording_type;

        return $this;
    }

    /**
     * Gets content_id
     * @return int
     */
    public function getContentId()
    {
        return $this->container['content_id'];
    }

    /**
     * Sets content_id
     * @param int $content_id
     * @return $this
     */
    public function setContentId($content_id)
    {
        $this->container['content_id'] = $content_id;

        return $this;
    }

    /**
     * Gets thumbnail_url
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     * @param string $thumbnail_url
     * @return $this
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets start_time_offset
     * @return int
     */
    public function getStartTimeOffset()
    {
        return $this->container['start_time_offset'];
    }

    /**
     * Sets start_time_offset
     * @param int $start_time_offset
     * @return $this
     */
    public function setStartTimeOffset($start_time_offset)
    {
        $this->container['start_time_offset'] = $start_time_offset;

        return $this;
    }

    /**
     * Gets end_time_offset
     * @return int
     */
    public function getEndTimeOffset()
    {
        return $this->container['end_time_offset'];
    }

    /**
     * Sets end_time_offset
     * @param int $end_time_offset
     * @return $this
     */
    public function setEndTimeOffset($end_time_offset)
    {
        $this->container['end_time_offset'] = $end_time_offset;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets started_by
     * @return \Swagger\Client\Model\RecordingStartedBy
     */
    public function getStartedBy()
    {
        return $this->container['started_by'];
    }

    /**
     * Sets started_by
     * @param \Swagger\Client\Model\RecordingStartedBy $started_by
     * @return $this
     */
    public function setStartedBy($started_by)
    {
        $this->container['started_by'] = $started_by;

        return $this;
    }

    /**
     * Gets stopped_by
     * @return \Swagger\Client\Model\RecordingStartedBy
     */
    public function getStoppedBy()
    {
        return $this->container['stopped_by'];
    }

    /**
     * Sets stopped_by
     * @param \Swagger\Client\Model\RecordingStartedBy $stopped_by
     * @return $this
     */
    public function setStoppedBy($stopped_by)
    {
        $this->container['stopped_by'] = $stopped_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


