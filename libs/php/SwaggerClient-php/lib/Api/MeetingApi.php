<?php
/**
 * MeetingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BlueJeans onVideo REST API
 *
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use on of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * MeetingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeetingApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.bluejeans.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return MeetingApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelMeeting
     *
     * Cancel Meeting
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelMeeting($user_id, $meeting_id)
    {
        list($response) = $this->cancelMeetingWithHttpInfo($user_id, $meeting_id);
        return $response;
    }

    /**
     * Operation cancelMeetingWithHttpInfo
     *
     * Cancel Meeting
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelMeetingWithHttpInfo($user_id, $meeting_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling cancelMeeting');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling cancelMeeting');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/user/{user_id}/scheduled_meeting/{meeting_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createMeeting
     *
     * Create Meeting
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param \Swagger\Client\Model\Meeting $meeting The details of the meeting. (required)
     * @param bool $email If set to true, sends invitation emails to all listed participants. (optional)
     * @return \Swagger\Client\Model\Meeting
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createMeeting($user_id, $meeting, $email = null)
    {
        list($response) = $this->createMeetingWithHttpInfo($user_id, $meeting, $email);
        return $response;
    }

    /**
     * Operation createMeetingWithHttpInfo
     *
     * Create Meeting
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param \Swagger\Client\Model\Meeting $meeting The details of the meeting. (required)
     * @param bool $email If set to true, sends invitation emails to all listed participants. (optional)
     * @return Array of \Swagger\Client\Model\Meeting, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createMeetingWithHttpInfo($user_id, $meeting, $email = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling createMeeting');
        }
        // verify the required parameter 'meeting' is set
        if ($meeting === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting when calling createMeeting');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/scheduled_meeting";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($meeting)) {
            $_tempBody = $meeting;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meeting',
                '/v1/user/{user_id}/scheduled_meeting'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meeting', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meeting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation generatePairingCodeSip
     *
     * Generate Pairing Code (SIP)
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadPairingCodeSIP $payload_pairing_code_sip  (required)
     * @return \Swagger\Client\Model\PairingCode
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function generatePairingCodeSip($user_id, $meeting_id, $payload_pairing_code_sip)
    {
        list($response) = $this->generatePairingCodeSipWithHttpInfo($user_id, $meeting_id, $payload_pairing_code_sip);
        return $response;
    }

    /**
     * Operation generatePairingCodeSipWithHttpInfo
     *
     * Generate Pairing Code (SIP)
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadPairingCodeSIP $payload_pairing_code_sip  (required)
     * @return Array of \Swagger\Client\Model\PairingCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function generatePairingCodeSipWithHttpInfo($user_id, $meeting_id, $payload_pairing_code_sip)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling generatePairingCodeSip');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling generatePairingCodeSip');
        }
        // verify the required parameter 'payload_pairing_code_sip' is set
        if ($payload_pairing_code_sip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload_pairing_code_sip when calling generatePairingCodeSip');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/pairing_code/sip";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload_pairing_code_sip)) {
            $_tempBody = $payload_pairing_code_sip;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PairingCode',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/pairing_code/sip'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PairingCode', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PairingCode', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation generatePairingCodeWebRtc
     *
     * Generate Pairing Code (WebRTC)
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadPairingCodeWebRTC $payload_pairing_code_web_rtc  (required)
     * @param string $role  (optional, default to USER)
     * @return \Swagger\Client\Model\PairingCode
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function generatePairingCodeWebRtc($user_id, $meeting_id, $payload_pairing_code_web_rtc, $role = null)
    {
        list($response) = $this->generatePairingCodeWebRtcWithHttpInfo($user_id, $meeting_id, $payload_pairing_code_web_rtc, $role);
        return $response;
    }

    /**
     * Operation generatePairingCodeWebRtcWithHttpInfo
     *
     * Generate Pairing Code (WebRTC)
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadPairingCodeWebRTC $payload_pairing_code_web_rtc  (required)
     * @param string $role  (optional, default to USER)
     * @return Array of \Swagger\Client\Model\PairingCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function generatePairingCodeWebRtcWithHttpInfo($user_id, $meeting_id, $payload_pairing_code_web_rtc, $role = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling generatePairingCodeWebRtc');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling generatePairingCodeWebRtc');
        }
        // verify the required parameter 'payload_pairing_code_web_rtc' is set
        if ($payload_pairing_code_web_rtc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload_pairing_code_web_rtc when calling generatePairingCodeWebRtc');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/pairing_code/webrtc";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($role !== null) {
            $queryParams['role'] = $this->apiClient->getSerializer()->toQueryValue($role);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload_pairing_code_web_rtc)) {
            $_tempBody = $payload_pairing_code_web_rtc;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PairingCode',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/pairing_code/webrtc'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PairingCode', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PairingCode', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEndpointLayout
     *
     * Get Endpoint Layout
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @return \Swagger\Client\Model\Layout
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEndpointLayout($user_id, $meeting_id, $endpoint_guid)
    {
        list($response) = $this->getEndpointLayoutWithHttpInfo($user_id, $meeting_id, $endpoint_guid);
        return $response;
    }

    /**
     * Operation getEndpointLayoutWithHttpInfo
     *
     * Get Endpoint Layout
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @return Array of \Swagger\Client\Model\Layout, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEndpointLayoutWithHttpInfo($user_id, $meeting_id, $endpoint_guid)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getEndpointLayout');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getEndpointLayout');
        }
        // verify the required parameter 'endpoint_guid' is set
        if ($endpoint_guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endpoint_guid when calling getEndpointLayout');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}/layout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_guid !== null) {
            $resourcePath = str_replace(
                "{" . "endpoint_guid" . "}",
                $this->apiClient->getSerializer()->toPathValue($endpoint_guid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Layout',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}/layout'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Layout', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Layout', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeeting
     *
     * Get Meeting
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. This is not the numeric meeting ID visible to users. (required)
     * @return \Swagger\Client\Model\Meeting
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeeting($user_id, $meeting_id)
    {
        list($response) = $this->getMeetingWithHttpInfo($user_id, $meeting_id);
        return $response;
    }

    /**
     * Operation getMeetingWithHttpInfo
     *
     * Get Meeting
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. This is not the numeric meeting ID visible to users. (required)
     * @return Array of \Swagger\Client\Model\Meeting, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingWithHttpInfo($user_id, $meeting_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getMeeting');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getMeeting');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meeting',
                '/v1/user/{user_id}/scheduled_meeting/{meeting_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meeting', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meeting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeetingEmails
     *
     * Get Meeting Email
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $type TEXT, ICS, HTML (optional)
     * @param string $role moderator, participant (optional)
     * @param string $action create, edit, delete (optional)
     * @return \Swagger\Client\Model\Meeting
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingEmails($user_id, $meeting_id, $type = null, $role = null, $action = null)
    {
        list($response) = $this->getMeetingEmailsWithHttpInfo($user_id, $meeting_id, $type, $role, $action);
        return $response;
    }

    /**
     * Operation getMeetingEmailsWithHttpInfo
     *
     * Get Meeting Email
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $type TEXT, ICS, HTML (optional)
     * @param string $role moderator, participant (optional)
     * @param string $action create, edit, delete (optional)
     * @return Array of \Swagger\Client\Model\Meeting, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingEmailsWithHttpInfo($user_id, $meeting_id, $type = null, $role = null, $action = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getMeetingEmails');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getMeetingEmails');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}/emails";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = $this->apiClient->getSerializer()->toQueryValue($role);
        }
        // query params
        if ($action !== null) {
            $queryParams['action'] = $this->apiClient->getSerializer()->toQueryValue($action);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meeting',
                '/v1/user/{user_id}/scheduled_meeting/{meeting_id}/emails'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meeting', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meeting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeetingEndpoint
     *
     * Get Endpoint Information
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @return \Swagger\Client\Model\Endpoint
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingEndpoint($user_id, $meeting_id, $endpoint_guid)
    {
        list($response) = $this->getMeetingEndpointWithHttpInfo($user_id, $meeting_id, $endpoint_guid);
        return $response;
    }

    /**
     * Operation getMeetingEndpointWithHttpInfo
     *
     * Get Endpoint Information
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @return Array of \Swagger\Client\Model\Endpoint, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingEndpointWithHttpInfo($user_id, $meeting_id, $endpoint_guid)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getMeetingEndpoint');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getMeetingEndpoint');
        }
        // verify the required parameter 'endpoint_guid' is set
        if ($endpoint_guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endpoint_guid when calling getMeetingEndpoint');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_guid !== null) {
            $resourcePath = str_replace(
                "{" . "endpoint_guid" . "}",
                $this->apiClient->getSerializer()->toPathValue($endpoint_guid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Endpoint',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Endpoint', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Endpoint', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeetingEndpoints
     *
     * List Meeting Endpoints
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return \Swagger\Client\Model\Endpoints
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingEndpoints($user_id, $meeting_id)
    {
        list($response) = $this->getMeetingEndpointsWithHttpInfo($user_id, $meeting_id);
        return $response;
    }

    /**
     * Operation getMeetingEndpointsWithHttpInfo
     *
     * List Meeting Endpoints
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return Array of \Swagger\Client\Model\Endpoints, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingEndpointsWithHttpInfo($user_id, $meeting_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getMeetingEndpoints');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getMeetingEndpoints');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Endpoints',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Endpoints', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Endpoints', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeetingNumbers
     *
     * Get Meeting Join Info
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return \Swagger\Client\Model\Numbers
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingNumbers($user_id, $meeting_id)
    {
        list($response) = $this->getMeetingNumbersWithHttpInfo($user_id, $meeting_id);
        return $response;
    }

    /**
     * Operation getMeetingNumbersWithHttpInfo
     *
     * Get Meeting Join Info
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return Array of \Swagger\Client\Model\Numbers, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingNumbersWithHttpInfo($user_id, $meeting_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getMeetingNumbers');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getMeetingNumbers');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/meetings/{meeting_id}/numbers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Numbers',
                '/v1/user/{user_id}/meetings/{meeting_id}/numbers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Numbers', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Numbers', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeetingState
     *
     * Get Meeting State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return \Swagger\Client\Model\MeetingState
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingState($user_id, $meeting_id)
    {
        list($response) = $this->getMeetingStateWithHttpInfo($user_id, $meeting_id);
        return $response;
    }

    /**
     * Operation getMeetingStateWithHttpInfo
     *
     * Get Meeting State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @return Array of \Swagger\Client\Model\MeetingState, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMeetingStateWithHttpInfo($user_id, $meeting_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getMeetingState');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling getMeetingState');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MeetingState',
                '/v1/user/{user_id}/live_meetings/{meeting_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MeetingState', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MeetingState', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listMeetings
     *
     * List Meetings
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @return \Swagger\Client\Model\Meeting[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listMeetings($user_id)
    {
        list($response) = $this->listMeetingsWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation listMeetingsWithHttpInfo
     *
     * List Meetings
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @return Array of \Swagger\Client\Model\Meeting[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listMeetingsWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling listMeetings');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/scheduled_meeting";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meeting[]',
                '/v1/user/{user_id}/scheduled_meeting'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meeting[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meeting[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendMeetingInvite
     *
     * Send Email Invite
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadInvite $payload_invite  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sendMeetingInvite($user_id, $meeting_id, $payload_invite)
    {
        list($response) = $this->sendMeetingInviteWithHttpInfo($user_id, $meeting_id, $payload_invite);
        return $response;
    }

    /**
     * Operation sendMeetingInviteWithHttpInfo
     *
     * Send Email Invite
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadInvite $payload_invite  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sendMeetingInviteWithHttpInfo($user_id, $meeting_id, $payload_invite)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling sendMeetingInvite');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling sendMeetingInvite');
        }
        // verify the required parameter 'payload_invite' is set
        if ($payload_invite === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload_invite when calling sendMeetingInvite');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/invite";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload_invite)) {
            $_tempBody = $payload_invite;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/user/{user_id}/live_meetings/{meeting_id}/invite'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEndpointLayout
     *
     * Update Endpoint Layout
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @param bool $is_leader  (optional)
     * @param bool $push  (optional)
     * @return \Swagger\Client\Model\Layout
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateEndpointLayout($user_id, $meeting_id, $endpoint_guid, $is_leader = null, $push = null)
    {
        list($response) = $this->updateEndpointLayoutWithHttpInfo($user_id, $meeting_id, $endpoint_guid, $is_leader, $push);
        return $response;
    }

    /**
     * Operation updateEndpointLayoutWithHttpInfo
     *
     * Update Endpoint Layout
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @param bool $is_leader  (optional)
     * @param bool $push  (optional)
     * @return Array of \Swagger\Client\Model\Layout, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateEndpointLayoutWithHttpInfo($user_id, $meeting_id, $endpoint_guid, $is_leader = null, $push = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateEndpointLayout');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling updateEndpointLayout');
        }
        // verify the required parameter 'endpoint_guid' is set
        if ($endpoint_guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endpoint_guid when calling updateEndpointLayout');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}/layout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($is_leader !== null) {
            $queryParams['isLeader'] = $this->apiClient->getSerializer()->toQueryValue($is_leader);
        }
        // query params
        if ($push !== null) {
            $queryParams['push'] = $this->apiClient->getSerializer()->toQueryValue($push);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_guid !== null) {
            $resourcePath = str_replace(
                "{" . "endpoint_guid" . "}",
                $this->apiClient->getSerializer()->toPathValue($endpoint_guid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Layout',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}/layout'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Layout', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Layout', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMeeting
     *
     * Update Meeting
     *
     * @param int $user_id The ID of the user of interest.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\Meeting $meeting The user&#39;s room details that you wish to update. (required)
     * @return \Swagger\Client\Model\Meeting
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeeting($user_id, $meeting_id, $meeting)
    {
        list($response) = $this->updateMeetingWithHttpInfo($user_id, $meeting_id, $meeting);
        return $response;
    }

    /**
     * Operation updateMeetingWithHttpInfo
     *
     * Update Meeting
     *
     * @param int $user_id The ID of the user of interest.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\Meeting $meeting The user&#39;s room details that you wish to update. (required)
     * @return Array of \Swagger\Client\Model\Meeting, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingWithHttpInfo($user_id, $meeting_id, $meeting)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateMeeting');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling updateMeeting');
        }
        // verify the required parameter 'meeting' is set
        if ($meeting === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting when calling updateMeeting');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($meeting)) {
            $_tempBody = $meeting;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meeting',
                '/v1/user/{user_id}/scheduled_meeting/{meeting_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meeting', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meeting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMeetingEndpoint
     *
     * Update Endpoint Video/Audio State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @param bool $mute_audio Toggle the audio source mute. (optional)
     * @param bool $mute_video Toggle the video source mute. (optional)
     * @param bool $leave_meeting Remove the user from the meeting. (optional)
     * @return \Swagger\Client\Model\Endpoint
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingEndpoint($user_id, $meeting_id, $endpoint_guid, $mute_audio = null, $mute_video = null, $leave_meeting = null)
    {
        list($response) = $this->updateMeetingEndpointWithHttpInfo($user_id, $meeting_id, $endpoint_guid, $mute_audio, $mute_video, $leave_meeting);
        return $response;
    }

    /**
     * Operation updateMeetingEndpointWithHttpInfo
     *
     * Update Endpoint Video/Audio State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param string $endpoint_guid The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. (required)
     * @param bool $mute_audio Toggle the audio source mute. (optional)
     * @param bool $mute_video Toggle the video source mute. (optional)
     * @param bool $leave_meeting Remove the user from the meeting. (optional)
     * @return Array of \Swagger\Client\Model\Endpoint, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingEndpointWithHttpInfo($user_id, $meeting_id, $endpoint_guid, $mute_audio = null, $mute_video = null, $leave_meeting = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateMeetingEndpoint');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling updateMeetingEndpoint');
        }
        // verify the required parameter 'endpoint_guid' is set
        if ($endpoint_guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endpoint_guid when calling updateMeetingEndpoint');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($mute_audio !== null) {
            $queryParams['muteAudio'] = $this->apiClient->getSerializer()->toQueryValue($mute_audio);
        }
        // query params
        if ($mute_video !== null) {
            $queryParams['muteVideo'] = $this->apiClient->getSerializer()->toQueryValue($mute_video);
        }
        // query params
        if ($leave_meeting !== null) {
            $queryParams['leaveMeeting'] = $this->apiClient->getSerializer()->toQueryValue($leave_meeting);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_guid !== null) {
            $resourcePath = str_replace(
                "{" . "endpoint_guid" . "}",
                $this->apiClient->getSerializer()->toPathValue($endpoint_guid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Endpoint',
                '/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints/{endpoint_guid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Endpoint', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Endpoint', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMeetingEndpoints
     *
     * Update Meeting Endpoints State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param bool $mute Allows you to mute/unmute all participants in a meeting. Set mute to true to mute.  Set mute to false to unmute. (optional)
     * @param string $media Specify the type of media you which to mute/unmute. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingEndpoints($user_id, $meeting_id, $mute = null, $media = null)
    {
        list($response) = $this->updateMeetingEndpointsWithHttpInfo($user_id, $meeting_id, $mute, $media);
        return $response;
    }

    /**
     * Operation updateMeetingEndpointsWithHttpInfo
     *
     * Update Meeting Endpoints State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param bool $mute Allows you to mute/unmute all participants in a meeting. Set mute to true to mute.  Set mute to false to unmute. (optional)
     * @param string $media Specify the type of media you which to mute/unmute. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingEndpointsWithHttpInfo($user_id, $meeting_id, $mute = null, $media = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateMeetingEndpoints');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling updateMeetingEndpoints');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($mute !== null) {
            $queryParams['mute'] = $this->apiClient->getSerializer()->toQueryValue($mute);
        }
        // query params
        if ($media !== null) {
            $queryParams['media'] = $this->apiClient->getSerializer()->toQueryValue($media);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/user/{user_id}/live_meetings/{meeting_id}/endpoints'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMeetingState
     *
     * Update Meeting State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadMeetingState $payload_meeting_state The meeting properties that you wish to update. (required)
     * @param int $delay Number of seconds to delay the end meeting operation. (optional)
     * @return \Swagger\Client\Model\Meeting
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingState($user_id, $meeting_id, $payload_meeting_state, $delay = null)
    {
        list($response) = $this->updateMeetingStateWithHttpInfo($user_id, $meeting_id, $payload_meeting_state, $delay);
        return $response;
    }

    /**
     * Operation updateMeetingStateWithHttpInfo
     *
     * Update Meeting State
     *
     * @param int $user_id The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. (required)
     * @param int $meeting_id The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. (required)
     * @param \Swagger\Client\Model\PayloadMeetingState $payload_meeting_state The meeting properties that you wish to update. (required)
     * @param int $delay Number of seconds to delay the end meeting operation. (optional)
     * @return Array of \Swagger\Client\Model\Meeting, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMeetingStateWithHttpInfo($user_id, $meeting_id, $payload_meeting_state, $delay = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateMeetingState');
        }
        // verify the required parameter 'meeting_id' is set
        if ($meeting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meeting_id when calling updateMeetingState');
        }
        // verify the required parameter 'payload_meeting_state' is set
        if ($payload_meeting_state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload_meeting_state when calling updateMeetingState');
        }
        // parse inputs
        $resourcePath = "/v1/user/{user_id}/live_meetings/{meeting_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($delay !== null) {
            $queryParams['delay'] = $this->apiClient->getSerializer()->toQueryValue($delay);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($meeting_id !== null) {
            $resourcePath = str_replace(
                "{" . "meeting_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($meeting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload_meeting_state)) {
            $_tempBody = $payload_meeting_state;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['access_token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Meeting',
                '/v1/user/{user_id}/live_meetings/{meeting_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Meeting', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Meeting', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
