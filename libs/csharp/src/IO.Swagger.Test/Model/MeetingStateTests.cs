/* 
 * BlueJeans onVideo REST API
 *
 * _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authorize button up in the header to store the token. Each BlueJeans API called after that will use the access token provided. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MeetingState
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class MeetingStateTests
    {
        // TODO uncomment below to declare an instance variable for MeetingState
        //private MeetingState instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of MeetingState
            //instance = new MeetingState();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MeetingState
        /// </summary>
        [Test]
        public void MeetingStateInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" MeetingState
            //Assert.IsInstanceOfType<MeetingState> (instance, "variable 'instance' is a MeetingState");
        }

        /// <summary>
        /// Test the property 'MeetingId'
        /// </summary>
        [Test]
        public void MeetingIdTest()
        {
            // TODO unit test for the property 'MeetingId'
        }
        /// <summary>
        /// Test the property 'MeetingGuid'
        /// </summary>
        [Test]
        public void MeetingGuidTest()
        {
            // TODO unit test for the property 'MeetingGuid'
        }
        /// <summary>
        /// Test the property '_MeetingState'
        /// </summary>
        [Test]
        public void _MeetingStateTest()
        {
            // TODO unit test for the property '_MeetingState'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Test]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'IsContentSharingActive'
        /// </summary>
        [Test]
        public void IsContentSharingActiveTest()
        {
            // TODO unit test for the property 'IsContentSharingActive'
        }
        /// <summary>
        /// Test the property 'Bridged'
        /// </summary>
        [Test]
        public void BridgedTest()
        {
            // TODO unit test for the property 'Bridged'
        }
        /// <summary>
        /// Test the property 'Locked'
        /// </summary>
        [Test]
        public void LockedTest()
        {
            // TODO unit test for the property 'Locked'
        }
        /// <summary>
        /// Test the property 'AudioMuteOnEntry'
        /// </summary>
        [Test]
        public void AudioMuteOnEntryTest()
        {
            // TODO unit test for the property 'AudioMuteOnEntry'
        }
        /// <summary>
        /// Test the property 'VideoMuteOnEntry'
        /// </summary>
        [Test]
        public void VideoMuteOnEntryTest()
        {
            // TODO unit test for the property 'VideoMuteOnEntry'
        }
        /// <summary>
        /// Test the property 'ModeratorLess'
        /// </summary>
        [Test]
        public void ModeratorLessTest()
        {
            // TODO unit test for the property 'ModeratorLess'
        }
        /// <summary>
        /// Test the property 'Title'
        /// </summary>
        [Test]
        public void TitleTest()
        {
            // TODO unit test for the property 'Title'
        }
        /// <summary>
        /// Test the property 'ChatEnabled'
        /// </summary>
        [Test]
        public void ChatEnabledTest()
        {
            // TODO unit test for the property 'ChatEnabled'
        }
        /// <summary>
        /// Test the property 'PinnedEndpointGuid'
        /// </summary>
        [Test]
        public void PinnedEndpointGuidTest()
        {
            // TODO unit test for the property 'PinnedEndpointGuid'
        }
        /// <summary>
        /// Test the property 'AudioEndpointCount'
        /// </summary>
        [Test]
        public void AudioEndpointCountTest()
        {
            // TODO unit test for the property 'AudioEndpointCount'
        }
        /// <summary>
        /// Test the property 'VideoEndpointCount'
        /// </summary>
        [Test]
        public void VideoEndpointCountTest()
        {
            // TODO unit test for the property 'VideoEndpointCount'
        }
        /// <summary>
        /// Test the property 'RecordingEnabled'
        /// </summary>
        [Test]
        public void RecordingEnabledTest()
        {
            // TODO unit test for the property 'RecordingEnabled'
        }
        /// <summary>
        /// Test the property 'ParticipantWebJoinURL'
        /// </summary>
        [Test]
        public void ParticipantWebJoinURLTest()
        {
            // TODO unit test for the property 'ParticipantWebJoinURL'
        }
        /// <summary>
        /// Test the property 'IsLargeMeeting'
        /// </summary>
        [Test]
        public void IsLargeMeetingTest()
        {
            // TODO unit test for the property 'IsLargeMeeting'
        }
        /// <summary>
        /// Test the property 'Features'
        /// </summary>
        [Test]
        public void FeaturesTest()
        {
            // TODO unit test for the property 'Features'
        }
        /// <summary>
        /// Test the property 'DelayedMeetingEndTime'
        /// </summary>
        [Test]
        public void DelayedMeetingEndTimeTest()
        {
            // TODO unit test for the property 'DelayedMeetingEndTime'
        }
        /// <summary>
        /// Test the property 'SmStreams'
        /// </summary>
        [Test]
        public void SmStreamsTest()
        {
            // TODO unit test for the property 'SmStreams'
        }
        /// <summary>
        /// Test the property 'InactiveMeetingStatus'
        /// </summary>
        [Test]
        public void InactiveMeetingStatusTest()
        {
            // TODO unit test for the property 'InactiveMeetingStatus'
        }
        /// <summary>
        /// Test the property 'MeetingMarkedForDelayedTermination'
        /// </summary>
        [Test]
        public void MeetingMarkedForDelayedTerminationTest()
        {
            // TODO unit test for the property 'MeetingMarkedForDelayedTermination'
        }
        /// <summary>
        /// Test the property 'Recordinginfo'
        /// </summary>
        [Test]
        public void RecordinginfoTest()
        {
            // TODO unit test for the property 'Recordinginfo'
        }

    }

}
