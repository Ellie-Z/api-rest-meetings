/* 
 * BlueJeans onVideo REST API
 *
 * _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authorize button up in the header to store the token. Each BlueJeans API called after that will use the access token provided. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContentContentProperties
    /// </summary>
    [DataContract]
    public partial class ContentContentProperties :  IEquatable<ContentContentProperties>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentContentProperties" /> class.
        /// </summary>
        /// <param name="Duration">Duration.</param>
        /// <param name="Thumbnail">Thumbnail.</param>
        /// <param name="ThumbnailSprite">ThumbnailSprite.</param>
        /// <param name="HdsUrl">HdsUrl.</param>
        /// <param name="ThumbnailCount">ThumbnailCount.</param>
        /// <param name="ThumbnailWidth">ThumbnailWidth.</param>
        /// <param name="ThumbnailHeight">ThumbnailHeight.</param>
        /// <param name="ThumbnailInterval">ThumbnailInterval.</param>
        /// <param name="HlsUrl">HlsUrl.</param>
        /// <param name="Levels">Levels.</param>
        public ContentContentProperties(int? Duration = null, string Thumbnail = null, string ThumbnailSprite = null, string HdsUrl = null, int? ThumbnailCount = null, int? ThumbnailWidth = null, int? ThumbnailHeight = null, int? ThumbnailInterval = null, string HlsUrl = null, List<ContentContentPropertiesLevels> Levels = null)
        {
            this.Duration = Duration;
            this.Thumbnail = Thumbnail;
            this.ThumbnailSprite = ThumbnailSprite;
            this.HdsUrl = HdsUrl;
            this.ThumbnailCount = ThumbnailCount;
            this.ThumbnailWidth = ThumbnailWidth;
            this.ThumbnailHeight = ThumbnailHeight;
            this.ThumbnailInterval = ThumbnailInterval;
            this.HlsUrl = HlsUrl;
            this.Levels = Levels;
        }
        
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }
        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public string Thumbnail { get; set; }
        /// <summary>
        /// Gets or Sets ThumbnailSprite
        /// </summary>
        [DataMember(Name="thumbnailSprite", EmitDefaultValue=false)]
        public string ThumbnailSprite { get; set; }
        /// <summary>
        /// Gets or Sets HdsUrl
        /// </summary>
        [DataMember(Name="hdsUrl", EmitDefaultValue=false)]
        public string HdsUrl { get; set; }
        /// <summary>
        /// Gets or Sets ThumbnailCount
        /// </summary>
        [DataMember(Name="thumbnailCount", EmitDefaultValue=false)]
        public int? ThumbnailCount { get; set; }
        /// <summary>
        /// Gets or Sets ThumbnailWidth
        /// </summary>
        [DataMember(Name="thumbnailWidth", EmitDefaultValue=false)]
        public int? ThumbnailWidth { get; set; }
        /// <summary>
        /// Gets or Sets ThumbnailHeight
        /// </summary>
        [DataMember(Name="thumbnailHeight", EmitDefaultValue=false)]
        public int? ThumbnailHeight { get; set; }
        /// <summary>
        /// Gets or Sets ThumbnailInterval
        /// </summary>
        [DataMember(Name="thumbnailInterval", EmitDefaultValue=false)]
        public int? ThumbnailInterval { get; set; }
        /// <summary>
        /// Gets or Sets HlsUrl
        /// </summary>
        [DataMember(Name="hlsUrl", EmitDefaultValue=false)]
        public string HlsUrl { get; set; }
        /// <summary>
        /// Gets or Sets Levels
        /// </summary>
        [DataMember(Name="levels", EmitDefaultValue=false)]
        public List<ContentContentPropertiesLevels> Levels { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentContentProperties {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  ThumbnailSprite: ").Append(ThumbnailSprite).Append("\n");
            sb.Append("  HdsUrl: ").Append(HdsUrl).Append("\n");
            sb.Append("  ThumbnailCount: ").Append(ThumbnailCount).Append("\n");
            sb.Append("  ThumbnailWidth: ").Append(ThumbnailWidth).Append("\n");
            sb.Append("  ThumbnailHeight: ").Append(ThumbnailHeight).Append("\n");
            sb.Append("  ThumbnailInterval: ").Append(ThumbnailInterval).Append("\n");
            sb.Append("  HlsUrl: ").Append(HlsUrl).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContentContentProperties);
        }

        /// <summary>
        /// Returns true if ContentContentProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ContentContentProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentContentProperties other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Thumbnail == other.Thumbnail ||
                    this.Thumbnail != null &&
                    this.Thumbnail.Equals(other.Thumbnail)
                ) && 
                (
                    this.ThumbnailSprite == other.ThumbnailSprite ||
                    this.ThumbnailSprite != null &&
                    this.ThumbnailSprite.Equals(other.ThumbnailSprite)
                ) && 
                (
                    this.HdsUrl == other.HdsUrl ||
                    this.HdsUrl != null &&
                    this.HdsUrl.Equals(other.HdsUrl)
                ) && 
                (
                    this.ThumbnailCount == other.ThumbnailCount ||
                    this.ThumbnailCount != null &&
                    this.ThumbnailCount.Equals(other.ThumbnailCount)
                ) && 
                (
                    this.ThumbnailWidth == other.ThumbnailWidth ||
                    this.ThumbnailWidth != null &&
                    this.ThumbnailWidth.Equals(other.ThumbnailWidth)
                ) && 
                (
                    this.ThumbnailHeight == other.ThumbnailHeight ||
                    this.ThumbnailHeight != null &&
                    this.ThumbnailHeight.Equals(other.ThumbnailHeight)
                ) && 
                (
                    this.ThumbnailInterval == other.ThumbnailInterval ||
                    this.ThumbnailInterval != null &&
                    this.ThumbnailInterval.Equals(other.ThumbnailInterval)
                ) && 
                (
                    this.HlsUrl == other.HlsUrl ||
                    this.HlsUrl != null &&
                    this.HlsUrl.Equals(other.HlsUrl)
                ) && 
                (
                    this.Levels == other.Levels ||
                    this.Levels != null &&
                    this.Levels.SequenceEqual(other.Levels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Thumbnail != null)
                    hash = hash * 59 + this.Thumbnail.GetHashCode();
                if (this.ThumbnailSprite != null)
                    hash = hash * 59 + this.ThumbnailSprite.GetHashCode();
                if (this.HdsUrl != null)
                    hash = hash * 59 + this.HdsUrl.GetHashCode();
                if (this.ThumbnailCount != null)
                    hash = hash * 59 + this.ThumbnailCount.GetHashCode();
                if (this.ThumbnailWidth != null)
                    hash = hash * 59 + this.ThumbnailWidth.GetHashCode();
                if (this.ThumbnailHeight != null)
                    hash = hash * 59 + this.ThumbnailHeight.GetHashCode();
                if (this.ThumbnailInterval != null)
                    hash = hash * 59 + this.ThumbnailInterval.GetHashCode();
                if (this.HlsUrl != null)
                    hash = hash * 59 + this.HlsUrl.GetHashCode();
                if (this.Levels != null)
                    hash = hash * 59 + this.Levels.GetHashCode();
                return hash;
            }
        }
    }

}
