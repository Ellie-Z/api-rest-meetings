/* 
 * BlueJeans onVideo REST API
 *
 * _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authenticate button up in the header to store the token. Each BlueJeans API called after that will use the access token provided. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHistoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Meeting</returns>
        Meeting V1EnterpriseEnterpriseIdMeetingHistoryGet (int? enterpriseId);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>ApiResponse of Meeting</returns>
        ApiResponse<Meeting> V1EnterpriseEnterpriseIdMeetingHistoryGetWithHttpInfo (int? enterpriseId);
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Meeting</returns>
        Meeting V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet (int? enterpriseId, string meetingGuid);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>ApiResponse of Meeting</returns>
        ApiResponse<Meeting> V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetWithHttpInfo (int? enterpriseId, string meetingGuid);
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>Meeting</returns>
        Meeting V1UserUserIdMeetingHistoryGet (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>ApiResponse of Meeting</returns>
        ApiResponse<Meeting> V1UserUserIdMeetingHistoryGetWithHttpInfo (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null);
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Meeting</returns>
        Meeting V1UserUserIdMeetingHistoryMeetingGuidGet (int? userId, string meetingGuid);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>ApiResponse of Meeting</returns>
        ApiResponse<Meeting> V1UserUserIdMeetingHistoryMeetingGuidGetWithHttpInfo (int? userId, string meetingGuid);
        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>List&lt;RecordingSummary&gt;</returns>
        List<RecordingSummary> V1UserUserIdMeetingHistoryRecordingsGet (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null);

        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>ApiResponse of List&lt;RecordingSummary&gt;</returns>
        ApiResponse<List<RecordingSummary>> V1UserUserIdMeetingHistoryRecordingsGetWithHttpInfo (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null);
        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>Recording</returns>
        Recording V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet (int? userId, int? recordingEntityId);

        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>ApiResponse of Recording</returns>
        ApiResponse<Recording> V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetWithHttpInfo (int? userId, int? recordingEntityId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of Meeting</returns>
        System.Threading.Tasks.Task<Meeting> V1EnterpriseEnterpriseIdMeetingHistoryGetAsync (int? enterpriseId);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Meeting>> V1EnterpriseEnterpriseIdMeetingHistoryGetAsyncWithHttpInfo (int? enterpriseId);
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of Meeting</returns>
        System.Threading.Tasks.Task<Meeting> V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetAsync (int? enterpriseId, string meetingGuid);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Meeting>> V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetAsyncWithHttpInfo (int? enterpriseId, string meetingGuid);
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>Task of Meeting</returns>
        System.Threading.Tasks.Task<Meeting> V1UserUserIdMeetingHistoryGetAsync (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Meeting>> V1UserUserIdMeetingHistoryGetAsyncWithHttpInfo (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null);
        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of Meeting</returns>
        System.Threading.Tasks.Task<Meeting> V1UserUserIdMeetingHistoryMeetingGuidGetAsync (int? userId, string meetingGuid);

        /// <summary>
        /// List Meetings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meetings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Meeting>> V1UserUserIdMeetingHistoryMeetingGuidGetAsyncWithHttpInfo (int? userId, string meetingGuid);
        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>Task of List&lt;RecordingSummary&gt;</returns>
        System.Threading.Tasks.Task<List<RecordingSummary>> V1UserUserIdMeetingHistoryRecordingsGetAsync (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null);

        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (List&lt;RecordingSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecordingSummary>>> V1UserUserIdMeetingHistoryRecordingsGetAsyncWithHttpInfo (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null);
        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>Task of Recording</returns>
        System.Threading.Tasks.Task<Recording> V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetAsync (int? userId, int? recordingEntityId);

        /// <summary>
        /// List Meeting Recordings
        /// </summary>
        /// <remarks>
        /// This endpoint retrieves a list of meeting recordings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>Task of ApiResponse (Recording)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recording>> V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetAsyncWithHttpInfo (int? userId, int? recordingEntityId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HistoryApi : IHistoryApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Meeting</returns>
        public Meeting V1EnterpriseEnterpriseIdMeetingHistoryGet (int? enterpriseId)
        {
             ApiResponse<Meeting> localVarResponse = V1EnterpriseEnterpriseIdMeetingHistoryGetWithHttpInfo(enterpriseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>ApiResponse of Meeting</returns>
        public ApiResponse< Meeting > V1EnterpriseEnterpriseIdMeetingHistoryGetWithHttpInfo (int? enterpriseId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling HistoryApi->V1EnterpriseEnterpriseIdMeetingHistoryGet");

            var localVarPath = "/v1/enterprise/{enterprise_id}/meeting_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EnterpriseEnterpriseIdMeetingHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of Meeting</returns>
        public async System.Threading.Tasks.Task<Meeting> V1EnterpriseEnterpriseIdMeetingHistoryGetAsync (int? enterpriseId)
        {
             ApiResponse<Meeting> localVarResponse = await V1EnterpriseEnterpriseIdMeetingHistoryGetAsyncWithHttpInfo(enterpriseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Meeting>> V1EnterpriseEnterpriseIdMeetingHistoryGetAsyncWithHttpInfo (int? enterpriseId)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling HistoryApi->V1EnterpriseEnterpriseIdMeetingHistoryGet");

            var localVarPath = "/v1/enterprise/{enterprise_id}/meeting_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EnterpriseEnterpriseIdMeetingHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Meeting</returns>
        public Meeting V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet (int? enterpriseId, string meetingGuid)
        {
             ApiResponse<Meeting> localVarResponse = V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetWithHttpInfo(enterpriseId, meetingGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>ApiResponse of Meeting</returns>
        public ApiResponse< Meeting > V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetWithHttpInfo (int? enterpriseId, string meetingGuid)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling HistoryApi->V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet");
            // verify the required parameter 'meetingGuid' is set
            if (meetingGuid == null)
                throw new ApiException(400, "Missing required parameter 'meetingGuid' when calling HistoryApi->V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet");

            var localVarPath = "/v1/enterprise/{enterprise_id}/meeting_history/{meeting_guid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (meetingGuid != null) localVarPathParams.Add("meeting_guid", Configuration.ApiClient.ParameterToString(meetingGuid)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of Meeting</returns>
        public async System.Threading.Tasks.Task<Meeting> V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetAsync (int? enterpriseId, string meetingGuid)
        {
             ApiResponse<Meeting> localVarResponse = await V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetAsyncWithHttpInfo(enterpriseId, meetingGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enterpriseId">The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Meeting>> V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGetAsyncWithHttpInfo (int? enterpriseId, string meetingGuid)
        {
            // verify the required parameter 'enterpriseId' is set
            if (enterpriseId == null)
                throw new ApiException(400, "Missing required parameter 'enterpriseId' when calling HistoryApi->V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet");
            // verify the required parameter 'meetingGuid' is set
            if (meetingGuid == null)
                throw new ApiException(400, "Missing required parameter 'meetingGuid' when calling HistoryApi->V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet");

            var localVarPath = "/v1/enterprise/{enterprise_id}/meeting_history/{meeting_guid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (enterpriseId != null) localVarPathParams.Add("enterprise_id", Configuration.ApiClient.ParameterToString(enterpriseId)); // path parameter
            if (meetingGuid != null) localVarPathParams.Add("meeting_guid", Configuration.ApiClient.ParameterToString(meetingGuid)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EnterpriseEnterpriseIdMeetingHistoryMeetingGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>Meeting</returns>
        public Meeting V1UserUserIdMeetingHistoryGet (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null)
        {
             ApiResponse<Meeting> localVarResponse = V1UserUserIdMeetingHistoryGetWithHttpInfo(userId, meetingId, startDate, endDate, pageSize, pageNumber, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>ApiResponse of Meeting</returns>
        public ApiResponse< Meeting > V1UserUserIdMeetingHistoryGetWithHttpInfo (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (meetingId != null) localVarQueryParams.Add("meetingId", Configuration.ApiClient.ParameterToString(meetingId)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>Task of Meeting</returns>
        public async System.Threading.Tasks.Task<Meeting> V1UserUserIdMeetingHistoryGetAsync (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null)
        {
             ApiResponse<Meeting> localVarResponse = await V1UserUserIdMeetingHistoryGetAsyncWithHttpInfo(userId, meetingId, startDate, endDate, pageSize, pageNumber, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingId">Return meetings with the specified Meeting ID (recurring &amp; Personal Meeting ID). (optional)</param>
        /// <param name="startDate">Return meetings starting from the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="endDate">Return meetings up until the specified date. MM/DD/YYYY (optional)</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional)</param>
        /// <param name="order">Puts results in ascending or descending order. asc/desc (optional)</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Meeting>> V1UserUserIdMeetingHistoryGetAsyncWithHttpInfo (int? userId, string meetingId = null, string startDate = null, string endDate = null, int? pageSize = null, int? pageNumber = null, string order = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (meetingId != null) localVarQueryParams.Add("meetingId", Configuration.ApiClient.ParameterToString(meetingId)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Meeting</returns>
        public Meeting V1UserUserIdMeetingHistoryMeetingGuidGet (int? userId, string meetingGuid)
        {
             ApiResponse<Meeting> localVarResponse = V1UserUserIdMeetingHistoryMeetingGuidGetWithHttpInfo(userId, meetingGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>ApiResponse of Meeting</returns>
        public ApiResponse< Meeting > V1UserUserIdMeetingHistoryMeetingGuidGetWithHttpInfo (int? userId, string meetingGuid)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryMeetingGuidGet");
            // verify the required parameter 'meetingGuid' is set
            if (meetingGuid == null)
                throw new ApiException(400, "Missing required parameter 'meetingGuid' when calling HistoryApi->V1UserUserIdMeetingHistoryMeetingGuidGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history/{meeting_guid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (meetingGuid != null) localVarPathParams.Add("meeting_guid", Configuration.ApiClient.ParameterToString(meetingGuid)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryMeetingGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of Meeting</returns>
        public async System.Threading.Tasks.Task<Meeting> V1UserUserIdMeetingHistoryMeetingGuidGetAsync (int? userId, string meetingGuid)
        {
             ApiResponse<Meeting> localVarResponse = await V1UserUserIdMeetingHistoryMeetingGuidGetAsyncWithHttpInfo(userId, meetingGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Meetings This endpoint retrieves a list of meetings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="meetingGuid">The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.</param>
        /// <returns>Task of ApiResponse (Meeting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Meeting>> V1UserUserIdMeetingHistoryMeetingGuidGetAsyncWithHttpInfo (int? userId, string meetingGuid)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryMeetingGuidGet");
            // verify the required parameter 'meetingGuid' is set
            if (meetingGuid == null)
                throw new ApiException(400, "Missing required parameter 'meetingGuid' when calling HistoryApi->V1UserUserIdMeetingHistoryMeetingGuidGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history/{meeting_guid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (meetingGuid != null) localVarPathParams.Add("meeting_guid", Configuration.ApiClient.ParameterToString(meetingGuid)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryMeetingGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Meeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Meeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Meeting)));
            
        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>List&lt;RecordingSummary&gt;</returns>
        public List<RecordingSummary> V1UserUserIdMeetingHistoryRecordingsGet (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null)
        {
             ApiResponse<List<RecordingSummary>> localVarResponse = V1UserUserIdMeetingHistoryRecordingsGetWithHttpInfo(userId, pageSize, pageNumber, sortBy, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>ApiResponse of List&lt;RecordingSummary&gt;</returns>
        public ApiResponse< List<RecordingSummary> > V1UserUserIdMeetingHistoryRecordingsGetWithHttpInfo (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryRecordingsGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryRecordingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecordingSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RecordingSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecordingSummary>)));
            
        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>Task of List&lt;RecordingSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecordingSummary>> V1UserUserIdMeetingHistoryRecordingsGetAsync (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null)
        {
             ApiResponse<List<RecordingSummary>> localVarResponse = await V1UserUserIdMeetingHistoryRecordingsGetAsyncWithHttpInfo(userId, pageSize, pageNumber, sortBy, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="pageSize">Sets number of items returned per page. (optional, default to 10)</param>
        /// <param name="pageNumber">Selects which page of results to return. (optional, default to 1)</param>
        /// <param name="sortBy">Selects which page of results to return. (optional, default to start_time)</param>
        /// <param name="order">Puts results in ascending or descending order. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (List&lt;RecordingSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RecordingSummary>>> V1UserUserIdMeetingHistoryRecordingsGetAsyncWithHttpInfo (int? userId, int? pageSize = null, int? pageNumber = null, string sortBy = null, string order = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryRecordingsGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryRecordingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecordingSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RecordingSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecordingSummary>)));
            
        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>Recording</returns>
        public Recording V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet (int? userId, int? recordingEntityId)
        {
             ApiResponse<Recording> localVarResponse = V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetWithHttpInfo(userId, recordingEntityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>ApiResponse of Recording</returns>
        public ApiResponse< Recording > V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetWithHttpInfo (int? userId, int? recordingEntityId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet");
            // verify the required parameter 'recordingEntityId' is set
            if (recordingEntityId == null)
                throw new ApiException(400, "Missing required parameter 'recordingEntityId' when calling HistoryApi->V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history/recordings/{recording_entity_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (recordingEntityId != null) localVarPathParams.Add("recording_entity_id", Configuration.ApiClient.ParameterToString(recordingEntityId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recording>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Recording) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Recording)));
            
        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>Task of Recording</returns>
        public async System.Threading.Tasks.Task<Recording> V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetAsync (int? userId, int? recordingEntityId)
        {
             ApiResponse<Recording> localVarResponse = await V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetAsyncWithHttpInfo(userId, recordingEntityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Meeting Recordings This endpoint retrieves a list of meeting recordings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.</param>
        /// <param name="recordingEntityId">The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId.</param>
        /// <returns>Task of ApiResponse (Recording)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Recording>> V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGetAsyncWithHttpInfo (int? userId, int? recordingEntityId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling HistoryApi->V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet");
            // verify the required parameter 'recordingEntityId' is set
            if (recordingEntityId == null)
                throw new ApiException(400, "Missing required parameter 'recordingEntityId' when calling HistoryApi->V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet");

            var localVarPath = "/v1/user/{user_id}/meeting_history/recordings/{recording_entity_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (recordingEntityId != null) localVarPathParams.Add("recording_entity_id", Configuration.ApiClient.ParameterToString(recordingEntityId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUserIdMeetingHistoryRecordingsRecordingEntityIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recording>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Recording) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Recording)));
            
        }

    }
}
