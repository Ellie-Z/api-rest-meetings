/* 
 * BlueJeans onVideo REST API
 *
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\"). ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.bluejeans.api.rest.onvideo.Client;
using com.bluejeans.api.rest.onvideo.Model;

namespace com.bluejeans.api.rest.onvideo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns></returns>
        void GetAuthorizationCode (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null);

        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthorizationCodeWithHttpInfo (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null);
        /// <summary>
        /// Authentication via Client Grant Type
        /// </summary>
        /// <remarks>
        /// This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantClient</returns>
        GrantClient GetTokenByClient (GrantRequestClient grantRequestClient);

        /// <summary>
        /// Authentication via Client Grant Type
        /// </summary>
        /// <remarks>
        /// This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantClient</returns>
        ApiResponse<GrantClient> GetTokenByClientWithHttpInfo (GrantRequestClient grantRequestClient);
        /// <summary>
        /// Authentication via Code Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantCode</returns>
        GrantCode GetTokenByCode (GrantRequestCode grantRequestCode);

        /// <summary>
        /// Authentication via Code Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantCode</returns>
        ApiResponse<GrantCode> GetTokenByCodeWithHttpInfo (GrantRequestCode grantRequestCode);
        /// <summary>
        /// Authentication via Meeting Grant Type
        /// </summary>
        /// <remarks>
        /// This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantMeeting</returns>
        GrantMeeting GetTokenByMeeting (GrantRequestMeeting grantRequestMeeting);

        /// <summary>
        /// Authentication via Meeting Grant Type
        /// </summary>
        /// <remarks>
        /// This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantMeeting</returns>
        ApiResponse<GrantMeeting> GetTokenByMeetingWithHttpInfo (GrantRequestMeeting grantRequestMeeting);
        /// <summary>
        /// Authentication via Password Grant Type
        /// </summary>
        /// <remarks>
        /// This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantPassword</returns>
        GrantPassword GetTokenByPassword (GrantRequestPassword grantRequestPassword);

        /// <summary>
        /// Authentication via Password Grant Type
        /// </summary>
        /// <remarks>
        /// This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantPassword</returns>
        ApiResponse<GrantPassword> GetTokenByPasswordWithHttpInfo (GrantRequestPassword grantRequestPassword);
        /// <summary>
        /// Authentication via Refresh Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantRefresh</returns>
        GrantRefresh GetTokenByRefresh (GrantRequestRefresh grantRequestRefresh);

        /// <summary>
        /// Authentication via Refresh Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantRefresh</returns>
        ApiResponse<GrantRefresh> GetTokenByRefreshWithHttpInfo (GrantRequestRefresh grantRequestRefresh);
        /// <summary>
        /// Validate a Token
        /// </summary>
        /// <remarks>
        /// This endpoint will validate if a token is valid or not.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetTokenInfo ();

        /// <summary>
        /// Validate a Token
        /// </summary>
        /// <remarks>
        /// This endpoint will validate if a token is valid or not.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetTokenInfoWithHttpInfo ();
        /// <summary>
        /// Revoke Access Token
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns></returns>
        void RevokeAccessToken (GrantRequestRevoke grantRequestRevoke, string accessToken = null);

        /// <summary>
        /// Revoke Access Token
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeAccessTokenWithHttpInfo (GrantRequestRevoke grantRequestRevoke, string accessToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthorizationCodeAsync (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null);

        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthorizationCodeAsyncWithHttpInfo (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null);
        /// <summary>
        /// Authentication via Client Grant Type
        /// </summary>
        /// <remarks>
        /// This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantClient</returns>
        System.Threading.Tasks.Task<GrantClient> GetTokenByClientAsync (GrantRequestClient grantRequestClient);

        /// <summary>
        /// Authentication via Client Grant Type
        /// </summary>
        /// <remarks>
        /// This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantClient>> GetTokenByClientAsyncWithHttpInfo (GrantRequestClient grantRequestClient);
        /// <summary>
        /// Authentication via Code Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantCode</returns>
        System.Threading.Tasks.Task<GrantCode> GetTokenByCodeAsync (GrantRequestCode grantRequestCode);

        /// <summary>
        /// Authentication via Code Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantCode>> GetTokenByCodeAsyncWithHttpInfo (GrantRequestCode grantRequestCode);
        /// <summary>
        /// Authentication via Meeting Grant Type
        /// </summary>
        /// <remarks>
        /// This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantMeeting</returns>
        System.Threading.Tasks.Task<GrantMeeting> GetTokenByMeetingAsync (GrantRequestMeeting grantRequestMeeting);

        /// <summary>
        /// Authentication via Meeting Grant Type
        /// </summary>
        /// <remarks>
        /// This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantMeeting)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantMeeting>> GetTokenByMeetingAsyncWithHttpInfo (GrantRequestMeeting grantRequestMeeting);
        /// <summary>
        /// Authentication via Password Grant Type
        /// </summary>
        /// <remarks>
        /// This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantPassword</returns>
        System.Threading.Tasks.Task<GrantPassword> GetTokenByPasswordAsync (GrantRequestPassword grantRequestPassword);

        /// <summary>
        /// Authentication via Password Grant Type
        /// </summary>
        /// <remarks>
        /// This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantPassword>> GetTokenByPasswordAsyncWithHttpInfo (GrantRequestPassword grantRequestPassword);
        /// <summary>
        /// Authentication via Refresh Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantRefresh</returns>
        System.Threading.Tasks.Task<GrantRefresh> GetTokenByRefreshAsync (GrantRequestRefresh grantRequestRefresh);

        /// <summary>
        /// Authentication via Refresh Grant Type
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantRefresh)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantRefresh>> GetTokenByRefreshAsyncWithHttpInfo (GrantRequestRefresh grantRequestRefresh);
        /// <summary>
        /// Validate a Token
        /// </summary>
        /// <remarks>
        /// This endpoint will validate if a token is valid or not.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetTokenInfoAsync ();

        /// <summary>
        /// Validate a Token
        /// </summary>
        /// <remarks>
        /// This endpoint will validate if a token is valid or not.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetTokenInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Revoke Access Token
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeAccessTokenAsync (GrantRequestRevoke grantRequestRevoke, string accessToken = null);

        /// <summary>
        /// Revoke Access Token
        /// </summary>
        /// <remarks>
        /// This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </remarks>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeAccessTokenAsyncWithHttpInfo (GrantRequestRevoke grantRequestRevoke, string accessToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private com.bluejeans.api.rest.onvideo.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.bluejeans.api.rest.onvideo.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.bluejeans.api.rest.onvideo.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.bluejeans.api.rest.onvideo.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Authorization Code This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns></returns>
        public void GetAuthorizationCode (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null)
        {
             GetAuthorizationCodeWithHttpInfo(clientId, redirectUri, state, scope, responseType);
        }

        /// <summary>
        /// Get Authorization Code This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetAuthorizationCodeWithHttpInfo (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null)
        {

            var localVarPath = "/oauth2/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarQueryParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // query parameter
            if (redirectUri != null) localVarQueryParams.Add("redirectUri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (scope != null) localVarQueryParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // query parameter
            if (responseType != null) localVarQueryParams.Add("responseType", Configuration.ApiClient.ParameterToString(responseType)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Authorization Code This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthorizationCodeAsync (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null)
        {
             await GetAuthorizationCodeAsyncWithHttpInfo(clientId, redirectUri, state, scope, responseType);

        }

        /// <summary>
        /// Get Authorization Code This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The 32 character client ID generated when you created the client application. (optional)</param>
        /// <param name="redirectUri">The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)</param>
        /// <param name="state">Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)</param>
        /// <param name="scope">A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info (optional)</param>
        /// <param name="responseType">The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthorizationCodeAsyncWithHttpInfo (string clientId = null, string redirectUri = null, string state = null, string scope = null, string responseType = null)
        {

            var localVarPath = "/oauth2/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarQueryParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // query parameter
            if (redirectUri != null) localVarQueryParams.Add("redirectUri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (scope != null) localVarQueryParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // query parameter
            if (responseType != null) localVarQueryParams.Add("responseType", Configuration.ApiClient.ParameterToString(responseType)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Authentication via Client Grant Type This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantClient</returns>
        public GrantClient GetTokenByClient (GrantRequestClient grantRequestClient)
        {
             ApiResponse<GrantClient> localVarResponse = GetTokenByClientWithHttpInfo(grantRequestClient);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication via Client Grant Type This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantClient</returns>
        public ApiResponse< GrantClient > GetTokenByClientWithHttpInfo (GrantRequestClient grantRequestClient)
        {
            // verify the required parameter 'grantRequestClient' is set
            if (grantRequestClient == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestClient' when calling AuthenticationApi->GetTokenByClient");

            var localVarPath = "/oauth2/token?Client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestClient != null && grantRequestClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestClient; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantClient) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantClient)));
            
        }

        /// <summary>
        /// Authentication via Client Grant Type This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantClient</returns>
        public async System.Threading.Tasks.Task<GrantClient> GetTokenByClientAsync (GrantRequestClient grantRequestClient)
        {
             ApiResponse<GrantClient> localVarResponse = await GetTokenByClientAsyncWithHttpInfo(grantRequestClient);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authentication via Client Grant Type This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestClient">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GrantClient>> GetTokenByClientAsyncWithHttpInfo (GrantRequestClient grantRequestClient)
        {
            // verify the required parameter 'grantRequestClient' is set
            if (grantRequestClient == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestClient' when calling AuthenticationApi->GetTokenByClient");

            var localVarPath = "/oauth2/token?Client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestClient != null && grantRequestClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestClient; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantClient) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantClient)));
            
        }

        /// <summary>
        /// Authentication via Code Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantCode</returns>
        public GrantCode GetTokenByCode (GrantRequestCode grantRequestCode)
        {
             ApiResponse<GrantCode> localVarResponse = GetTokenByCodeWithHttpInfo(grantRequestCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication via Code Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantCode</returns>
        public ApiResponse< GrantCode > GetTokenByCodeWithHttpInfo (GrantRequestCode grantRequestCode)
        {
            // verify the required parameter 'grantRequestCode' is set
            if (grantRequestCode == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestCode' when calling AuthenticationApi->GetTokenByCode");

            var localVarPath = "/oauth2/token?Code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestCode != null && grantRequestCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestCode; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantCode)));
            
        }

        /// <summary>
        /// Authentication via Code Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantCode</returns>
        public async System.Threading.Tasks.Task<GrantCode> GetTokenByCodeAsync (GrantRequestCode grantRequestCode)
        {
             ApiResponse<GrantCode> localVarResponse = await GetTokenByCodeAsyncWithHttpInfo(grantRequestCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authentication via Code Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestCode">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GrantCode>> GetTokenByCodeAsyncWithHttpInfo (GrantRequestCode grantRequestCode)
        {
            // verify the required parameter 'grantRequestCode' is set
            if (grantRequestCode == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestCode' when calling AuthenticationApi->GetTokenByCode");

            var localVarPath = "/oauth2/token?Code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestCode != null && grantRequestCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestCode; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantCode)));
            
        }

        /// <summary>
        /// Authentication via Meeting Grant Type This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantMeeting</returns>
        public GrantMeeting GetTokenByMeeting (GrantRequestMeeting grantRequestMeeting)
        {
             ApiResponse<GrantMeeting> localVarResponse = GetTokenByMeetingWithHttpInfo(grantRequestMeeting);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication via Meeting Grant Type This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantMeeting</returns>
        public ApiResponse< GrantMeeting > GetTokenByMeetingWithHttpInfo (GrantRequestMeeting grantRequestMeeting)
        {
            // verify the required parameter 'grantRequestMeeting' is set
            if (grantRequestMeeting == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestMeeting' when calling AuthenticationApi->GetTokenByMeeting");

            var localVarPath = "/oauth2/token?Meeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestMeeting != null && grantRequestMeeting.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestMeeting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestMeeting; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantMeeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantMeeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantMeeting)));
            
        }

        /// <summary>
        /// Authentication via Meeting Grant Type This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantMeeting</returns>
        public async System.Threading.Tasks.Task<GrantMeeting> GetTokenByMeetingAsync (GrantRequestMeeting grantRequestMeeting)
        {
             ApiResponse<GrantMeeting> localVarResponse = await GetTokenByMeetingAsyncWithHttpInfo(grantRequestMeeting);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authentication via Meeting Grant Type This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestMeeting">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantMeeting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GrantMeeting>> GetTokenByMeetingAsyncWithHttpInfo (GrantRequestMeeting grantRequestMeeting)
        {
            // verify the required parameter 'grantRequestMeeting' is set
            if (grantRequestMeeting == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestMeeting' when calling AuthenticationApi->GetTokenByMeeting");

            var localVarPath = "/oauth2/token?Meeting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestMeeting != null && grantRequestMeeting.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestMeeting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestMeeting; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByMeeting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantMeeting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantMeeting) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantMeeting)));
            
        }

        /// <summary>
        /// Authentication via Password Grant Type This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantPassword</returns>
        public GrantPassword GetTokenByPassword (GrantRequestPassword grantRequestPassword)
        {
             ApiResponse<GrantPassword> localVarResponse = GetTokenByPasswordWithHttpInfo(grantRequestPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication via Password Grant Type This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantPassword</returns>
        public ApiResponse< GrantPassword > GetTokenByPasswordWithHttpInfo (GrantRequestPassword grantRequestPassword)
        {
            // verify the required parameter 'grantRequestPassword' is set
            if (grantRequestPassword == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestPassword' when calling AuthenticationApi->GetTokenByPassword");

            var localVarPath = "/oauth2/token?Password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestPassword != null && grantRequestPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestPassword; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantPassword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantPassword) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantPassword)));
            
        }

        /// <summary>
        /// Authentication via Password Grant Type This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantPassword</returns>
        public async System.Threading.Tasks.Task<GrantPassword> GetTokenByPasswordAsync (GrantRequestPassword grantRequestPassword)
        {
             ApiResponse<GrantPassword> localVarResponse = await GetTokenByPasswordAsyncWithHttpInfo(grantRequestPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authentication via Password Grant Type This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestPassword">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantPassword)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GrantPassword>> GetTokenByPasswordAsyncWithHttpInfo (GrantRequestPassword grantRequestPassword)
        {
            // verify the required parameter 'grantRequestPassword' is set
            if (grantRequestPassword == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestPassword' when calling AuthenticationApi->GetTokenByPassword");

            var localVarPath = "/oauth2/token?Password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestPassword != null && grantRequestPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestPassword; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantPassword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantPassword) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantPassword)));
            
        }

        /// <summary>
        /// Authentication via Refresh Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>GrantRefresh</returns>
        public GrantRefresh GetTokenByRefresh (GrantRequestRefresh grantRequestRefresh)
        {
             ApiResponse<GrantRefresh> localVarResponse = GetTokenByRefreshWithHttpInfo(grantRequestRefresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication via Refresh Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>ApiResponse of GrantRefresh</returns>
        public ApiResponse< GrantRefresh > GetTokenByRefreshWithHttpInfo (GrantRequestRefresh grantRequestRefresh)
        {
            // verify the required parameter 'grantRequestRefresh' is set
            if (grantRequestRefresh == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestRefresh' when calling AuthenticationApi->GetTokenByRefresh");

            var localVarPath = "/oauth2/token?Refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestRefresh != null && grantRequestRefresh.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestRefresh); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestRefresh; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantRefresh>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantRefresh) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantRefresh)));
            
        }

        /// <summary>
        /// Authentication via Refresh Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of GrantRefresh</returns>
        public async System.Threading.Tasks.Task<GrantRefresh> GetTokenByRefreshAsync (GrantRequestRefresh grantRequestRefresh)
        {
             ApiResponse<GrantRefresh> localVarResponse = await GetTokenByRefreshAsyncWithHttpInfo(grantRequestRefresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authentication via Refresh Grant Type This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRefresh">Contains information about the type of grant you are requesting.</param>
        /// <returns>Task of ApiResponse (GrantRefresh)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GrantRefresh>> GetTokenByRefreshAsyncWithHttpInfo (GrantRequestRefresh grantRequestRefresh)
        {
            // verify the required parameter 'grantRequestRefresh' is set
            if (grantRequestRefresh == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestRefresh' when calling AuthenticationApi->GetTokenByRefresh");

            var localVarPath = "/oauth2/token?Refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grantRequestRefresh != null && grantRequestRefresh.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestRefresh); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestRefresh; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenByRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GrantRefresh>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GrantRefresh) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GrantRefresh)));
            
        }

        /// <summary>
        /// Validate a Token This endpoint will validate if a token is valid or not.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetTokenInfo ()
        {
             ApiResponse<InlineResponse200> localVarResponse = GetTokenInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a Token This endpoint will validate if a token is valid or not.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetTokenInfoWithHttpInfo ()
        {

            var localVarPath = "/oauth2/tokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Validate a Token This endpoint will validate if a token is valid or not.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetTokenInfoAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetTokenInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a Token This endpoint will validate if a token is valid or not.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetTokenInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/oauth2/tokenInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Revoke Access Token This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns></returns>
        public void RevokeAccessToken (GrantRequestRevoke grantRequestRevoke, string accessToken = null)
        {
             RevokeAccessTokenWithHttpInfo(grantRequestRevoke, accessToken);
        }

        /// <summary>
        /// Revoke Access Token This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeAccessTokenWithHttpInfo (GrantRequestRevoke grantRequestRevoke, string accessToken = null)
        {
            // verify the required parameter 'grantRequestRevoke' is set
            if (grantRequestRevoke == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestRevoke' when calling AuthenticationApi->RevokeAccessToken");

            var localVarPath = "/oauth2/token?Revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessToken != null) localVarQueryParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // query parameter
            if (grantRequestRevoke != null && grantRequestRevoke.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestRevoke); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestRevoke; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Revoke Access Token This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeAccessTokenAsync (GrantRequestRevoke grantRequestRevoke, string accessToken = null)
        {
             await RevokeAccessTokenAsyncWithHttpInfo(grantRequestRevoke, accessToken);

        }

        /// <summary>
        /// Revoke Access Token This API is part of the 3-legged OAuth 2.0 authorization flow.
        /// </summary>
        /// <exception cref="com.bluejeans.api.rest.onvideo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantRequestRevoke">Contains information about the type of grant you are revoking.</param>
        /// <param name="accessToken"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeAccessTokenAsyncWithHttpInfo (GrantRequestRevoke grantRequestRevoke, string accessToken = null)
        {
            // verify the required parameter 'grantRequestRevoke' is set
            if (grantRequestRevoke == null)
                throw new ApiException(400, "Missing required parameter 'grantRequestRevoke' when calling AuthenticationApi->RevokeAccessToken");

            var localVarPath = "/oauth2/token?Revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessToken != null) localVarQueryParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // query parameter
            if (grantRequestRevoke != null && grantRequestRevoke.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(grantRequestRevoke); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantRequestRevoke; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeAccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
