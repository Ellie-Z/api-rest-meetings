/*
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.onvideo.api;

import com.bluejeans.api.rest.onvideo.ApiException;
import com.bluejeans.api.rest.onvideo.model.Application;
import com.bluejeans.api.rest.onvideo.model.ApplicationSecret;
import com.bluejeans.api.rest.onvideo.model.Error;
import com.bluejeans.api.rest.onvideo.model.GrantClient;
import com.bluejeans.api.rest.onvideo.model.GrantCode;
import com.bluejeans.api.rest.onvideo.model.GrantMeeting;
import com.bluejeans.api.rest.onvideo.model.GrantPassword;
import com.bluejeans.api.rest.onvideo.model.GrantRefresh;
import com.bluejeans.api.rest.onvideo.model.GrantRequestClient;
import com.bluejeans.api.rest.onvideo.model.GrantRequestCode;
import com.bluejeans.api.rest.onvideo.model.GrantRequestMeeting;
import com.bluejeans.api.rest.onvideo.model.GrantRequestPassword;
import com.bluejeans.api.rest.onvideo.model.GrantRequestRefresh;
import com.bluejeans.api.rest.onvideo.model.GrantRequestRevoke;
import com.bluejeans.api.rest.onvideo.model.InlineResponse200;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    
    /**
     * Create Client Application
     *
     * This endpoint creates a client application for use in 3-legged OAuth2 authorization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientApplicationTest() throws ApiException {
        Integer userId = null;
        Application application = null;
        Application response = api.createClientApplication(userId, application);

        // TODO: test validations
    }
    
    /**
     * Get Authorization Code
     *
     * This is NOT a REST endpoint. Documenting here for consistentcy. This URL shoujld be used by a client application user&#39;s browser to perform authorization.  User will be redirected back to client application upon completion with state and code parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizationCodeTest() throws ApiException {
        String clientId = null;
        String redirectUri = null;
        String state = null;
        String scope = null;
        String responseType = null;
        api.getAuthorizationCode(clientId, redirectUri, state, scope, responseType);

        // TODO: test validations
    }
    
    /**
     * Authentication via Client Grant Type
     *
     * This API is typically called from an application.  Client ID and Secret are provisioned within the BlueJeans Enterprise Administration console and given to the customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByClientTest() throws ApiException {
        GrantRequestClient grantRequestClient = null;
        GrantClient response = api.getTokenByClient(grantRequestClient);

        // TODO: test validations
    }
    
    /**
     * Authentication via Code Grant Type
     *
     * This API is part of the 3-legged OAuth 2.0 authorization flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByCodeTest() throws ApiException {
        GrantRequestCode grantRequestCode = null;
        GrantCode response = api.getTokenByCode(grantRequestCode);

        // TODO: test validations
    }
    
    /**
     * Authentication via Meeting Grant Type
     *
     * This API uses an OAuth-like grant/request method similar to the Password grant type. The scope of access covers the meeting only. Call this API with the meetings&#39; numerid ID, and the meeting passcode (it one exists).  If a Moderator passcode is sent, moderator privileges are granted. If an Attendee access code is passed, the access token will grant attendee abilities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByMeetingTest() throws ApiException {
        GrantRequestMeeting grantRequestMeeting = null;
        GrantMeeting response = api.getTokenByMeeting(grantRequestMeeting);

        // TODO: test validations
    }
    
    /**
     * Authentication via Password Grant Type
     *
     * This API performs an authentication based upon a username and password.   Call this API and provide a valid username and password.  Set the grant_type to \&quot;password\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByPasswordTest() throws ApiException {
        GrantRequestPassword grantRequestPassword = null;
        GrantPassword response = api.getTokenByPassword(grantRequestPassword);

        // TODO: test validations
    }
    
    /**
     * Authentication via Refresh Grant Type
     *
     * This API is part of the 3-legged OAuth 2.0 authorization flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByRefreshTest() throws ApiException {
        GrantRequestRefresh grantRequestRefresh = null;
        GrantRefresh response = api.getTokenByRefresh(grantRequestRefresh);

        // TODO: test validations
    }
    
    /**
     * Validate a Token
     *
     * This endpoint will validate if a token is valid or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenInfoTest() throws ApiException {
        InlineResponse200 response = api.getTokenInfo();

        // TODO: test validations
    }
    
    /**
     * Regenerate Client Application Secret
     *
     * This endpoint forces the regeneration of a client application secret for use in 3-legged OAuth2 authorization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void regenerateClientApplicationSecretTest() throws ApiException {
        Integer userId = null;
        Integer clientId = null;
        ApplicationSecret response = api.regenerateClientApplicationSecret(userId, clientId);

        // TODO: test validations
    }
    
    /**
     * Revoke Access Token
     *
     * This API is part of the 3-legged OAuth 2.0 authorization flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeAccessTokenTest() throws ApiException {
        GrantRequestRevoke grantRequestRevoke = null;
        String accessToken = null;
        api.revokeAccessToken(grantRequestRevoke, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update Client Application
     *
     * This endpoint updates a client application for use in 3-legged OAuth2 authorization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientApplicationTest() throws ApiException {
        Integer userId = null;
        Integer clientId = null;
        Application application = null;
        Application response = api.updateClientApplication(userId, clientId, application);

        // TODO: test validations
    }
    
}
