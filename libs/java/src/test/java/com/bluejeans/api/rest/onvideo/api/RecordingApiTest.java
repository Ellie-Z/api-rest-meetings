/*
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\"). ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.onvideo.api;

import com.bluejeans.api.rest.onvideo.ApiException;
import com.bluejeans.api.rest.onvideo.model.Content;
import com.bluejeans.api.rest.onvideo.model.Error;
import com.bluejeans.api.rest.onvideo.model.Meeting;
import com.bluejeans.api.rest.onvideo.model.RecordingHistoryList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecordingApi
 */
@Ignore
public class RecordingApiTest {

    private final RecordingApi api = new RecordingApi();

    
    /**
     * Get All Recordings for a Specified Meeting ID
     *
     * This endpoint lists the recordings for a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingRecordingsTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String meetingGuid = null;
        RecordingHistoryList response = api.getMeetingRecordings(userId, meetingId, meetingGuid);

        // TODO: test validations
    }
    
    /**
     * Get Recording Download Link
     *
     * This endpoint retrieves properties about the recording chapter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordingContentTest() throws ApiException {
        Integer userId = null;
        Integer contentId = null;
        Boolean isDownloadable = null;
        Content response = api.getRecordingContent(userId, contentId, isDownloadable);

        // TODO: test validations
    }
    
    /**
     * Start Recording
     *
     * This endpoint starts recording for a meeting in progress. Note that this is a POST operation. Stop is a PUT operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startRecordingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String action = null;
        api.startRecording(userId, meetingId, action);

        // TODO: test validations
    }
    
    /**
     * Stop Recording
     *
     * This endpoint stops recording for a meeting in progress. Note that this is a PUT operation. Start is a POST operation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopRecordingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String action = null;
        api.stopRecording(userId, meetingId, action);

        // TODO: test validations
    }
    
    /**
     * Delete All Recordings for a Specified Meeting GUID
     *
     * This endpoint stops recording for a meeting in progress. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1UserUserIdMeetingHistoryMeetingGuidRecordingsDeleteTest() throws ApiException {
        Integer userId = null;
        String meetingGuid = null;
        Meeting response = api.v1UserUserIdMeetingHistoryMeetingGuidRecordingsDelete(userId, meetingGuid);

        // TODO: test validations
    }
    
    /**
     * Delete a Specified Recording Chapter
     *
     * This endpoint stops recording for a meeting in progress.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDeleteTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Integer recordingChapterId = null;
        Meeting response = api.v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDelete(userId, meetingId, recordingChapterId);

        // TODO: test validations
    }
    
}
