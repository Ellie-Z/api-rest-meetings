/**
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use on of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.bluejeans.api.rest.onvideo.api;

import com.bluejeans.api.rest.onvideo.ApiException;
import com.bluejeans.api.rest.onvideo.model.Error;
import com.bluejeans.api.rest.onvideo.model.Meeting;
import com.bluejeans.api.rest.onvideo.model.PairingCode;
import com.bluejeans.api.rest.onvideo.model.PayloadPairingCodeSIP;
import com.bluejeans.api.rest.onvideo.model.PayloadPairingCodeWebRTC;
import com.bluejeans.api.rest.onvideo.model.Layout;
import com.bluejeans.api.rest.onvideo.model.Endpoint;
import com.bluejeans.api.rest.onvideo.model.Endpoints;
import com.bluejeans.api.rest.onvideo.model.Numbers;
import com.bluejeans.api.rest.onvideo.model.MeetingState;
import com.bluejeans.api.rest.onvideo.model.PayloadInvite;
import com.bluejeans.api.rest.onvideo.model.PayloadMeetingState;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeetingApi
 */
public class MeetingApiTest {

    private final MeetingApi api = new MeetingApi();

    
    /**
     * Cancel Meeting
     *
     * This endpoint deletes a scheuled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelMeetingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        // api.cancelMeeting(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * Create Meeting
     *
     * This endpoint will create a scheduled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMeetingTest() throws ApiException {
        Integer userId = null;
        Meeting meeting = null;
        Boolean email = null;
        // Meeting response = api.createMeeting(userId, meeting, email);

        // TODO: test validations
    }
    
    /**
     * Generate Pairing Code (SIP)
     *
     * This endpoint generates a SIP pairing code that can be used to connect to a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generatePairingCodeSipTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        PayloadPairingCodeSIP payloadPairingCodeSIP = null;
        // PairingCode response = api.generatePairingCodeSip(userId, meetingId, payloadPairingCodeSIP);

        // TODO: test validations
    }
    
    /**
     * Generate Pairing Code (WebRTC)
     *
     * This endpoint generates a WebRTC pairing code that can be used to connect to a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generatePairingCodeWebRtcTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        PayloadPairingCodeWebRTC payloadPairingCodeWebRTC = null;
        String role = null;
        // PairingCode response = api.generatePairingCodeWebRtc(userId, meetingId, payloadPairingCodeWebRTC, role);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Layout
     *
     * This endpoint allows you to retrieve an individual endpoint’s current layout setting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointLayoutTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String endpointGuid = null;
        // Layout response = api.getEndpointLayout(userId, meetingId, endpointGuid);

        // TODO: test validations
    }
    
    /**
     * Get Meeting
     *
     * This endpoint gets the settings for a user&#39;s meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        // Meeting response = api.getMeeting(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * Get Meeting Email
     *
     * This endpoint retrieves the email object for a scheduled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEmailsTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String type = null;
        String role = null;
        String action = null;
        // Meeting response = api.getMeetingEmails(userId, meetingId, type, role, action);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Information
     *
     * This endpoint allows you to retrieve information about an endpoint in the meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEndpointTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String endpointGuid = null;
        // Endpoint response = api.getMeetingEndpoint(userId, meetingId, endpointGuid);

        // TODO: test validations
    }
    
    /**
     * List Meeting Endpoints
     *
     * This endpoint returns an array of all endpoints in the current meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingEndpointsTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        // Endpoints response = api.getMeetingEndpoints(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * Get Meeting Join Info
     *
     * This endpoint retrieves the join information for a scheduled meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingNumbersTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        // Numbers response = api.getMeetingNumbers(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * Get Meeting State
     *
     * This endpoint’s purpose is to return whether the meeting is in progress or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeetingStateTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        // MeetingState response = api.getMeetingState(userId, meetingId);

        // TODO: test validations
    }
    
    /**
     * List Meetings
     *
     * This endpoint gets a list of the user&#39;s scheduled upcoming meetings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMeetingsTest() throws ApiException {
        Integer userId = null;
        // List<Meeting> response = api.listMeetings(userId);

        // TODO: test validations
    }
    
    /**
     * Send Email Invite
     *
     * This endpoint generates an email invite to the specified meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendMeetingInviteTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        PayloadInvite payloadInvite = null;
        // api.sendMeetingInvite(userId, meetingId, payloadInvite);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Layout
     *
     * This endpoint allows you to update an individual endpoint’s current layout setting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEndpointLayoutTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String endpointGuid = null;
        Boolean isLeader = null;
        Boolean push = null;
        // Layout response = api.updateEndpointLayout(userId, meetingId, endpointGuid, isLeader, push);

        // TODO: test validations
    }
    
    /**
     * Update Meeting
     *
     * This endpoint changes the settings for a user&#39;s meeting. For example, use for rescheduling.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Meeting meeting = null;
        // Meeting response = api.updateMeeting(userId, meetingId, meeting);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Video/Audio State
     *
     * This endpoint allows you to update an individual endpoint’s ability to send audio or video, and also allows removing an endpoint from the meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingEndpointTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        String endpointGuid = null;
        Boolean muteAudio = null;
        Boolean muteVideo = null;
        Boolean leaveMeeting = null;
        // Endpoint response = api.updateMeetingEndpoint(userId, meetingId, endpointGuid, muteAudio, muteVideo, leaveMeeting);

        // TODO: test validations
    }
    
    /**
     * Update Meeting Endpoints State
     *
     * This endpoint’s purpose is to be able to modify the endpoints in a meeting. Seems to require a Meeting-level access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingEndpointsTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        Boolean mute = null;
        String media = null;
        // api.updateMeetingEndpoints(userId, meetingId, mute, media);

        // TODO: test validations
    }
    
    /**
     * Update Meeting State
     *
     * This endpoint’s purpose is to be able to modify a meeting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeetingStateTest() throws ApiException {
        Integer userId = null;
        Integer meetingId = null;
        PayloadMeetingState payloadMeetingState = null;
        Integer delay = null;
        // Meeting response = api.updateMeetingState(userId, meetingId, payloadMeetingState, delay);

        // TODO: test validations
    }
    
}
