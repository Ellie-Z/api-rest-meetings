/*
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 4 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to perform operations. * Password Credentials Grant – Authenticate with a username and password and receive an access token with user level permission. Known as two-legged OAuth. * Meeting Credentials Grant – Authenticate with a meeting ID and meeting passcode and receive an access token with meeting level permission. Known as two-legged OAuth. * Client Credentials Grant –  Authenticate with a client ID and client secret and receive an access token with enterprise level permission. Known as two-legged OAuth. * Authorization Code Grant – After creating a developer application, users witll authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access token. Known as three-legged OAuth. ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – Scope of APIs is limited to individual meetings. * User-level – Scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users. All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bluejeans.api.rest.onvideo.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * AnalyticsFeedbackScores
 */

public class AnalyticsFeedbackScores {
  @SerializedName("Great")
  private Integer great = null;

  @SerializedName("Okay")
  private Integer okay = null;

  @SerializedName("Bad")
  private Integer bad = null;

  @SerializedName("Poor")
  private Integer poor = null;

  @SerializedName("Good")
  private Integer good = null;

  public AnalyticsFeedbackScores great(Integer great) {
    this.great = great;
    return this;
  }

   /**
   * Get great
   * @return great
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getGreat() {
    return great;
  }

  public void setGreat(Integer great) {
    this.great = great;
  }

  public AnalyticsFeedbackScores okay(Integer okay) {
    this.okay = okay;
    return this;
  }

   /**
   * Get okay
   * @return okay
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getOkay() {
    return okay;
  }

  public void setOkay(Integer okay) {
    this.okay = okay;
  }

  public AnalyticsFeedbackScores bad(Integer bad) {
    this.bad = bad;
    return this;
  }

   /**
   * Get bad
   * @return bad
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getBad() {
    return bad;
  }

  public void setBad(Integer bad) {
    this.bad = bad;
  }

  public AnalyticsFeedbackScores poor(Integer poor) {
    this.poor = poor;
    return this;
  }

   /**
   * Get poor
   * @return poor
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getPoor() {
    return poor;
  }

  public void setPoor(Integer poor) {
    this.poor = poor;
  }

  public AnalyticsFeedbackScores good(Integer good) {
    this.good = good;
    return this;
  }

   /**
   * Get good
   * @return good
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getGood() {
    return good;
  }

  public void setGood(Integer good) {
    this.good = good;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsFeedbackScores analyticsFeedbackScores = (AnalyticsFeedbackScores) o;
    return Objects.equals(this.great, analyticsFeedbackScores.great) &&
        Objects.equals(this.okay, analyticsFeedbackScores.okay) &&
        Objects.equals(this.bad, analyticsFeedbackScores.bad) &&
        Objects.equals(this.poor, analyticsFeedbackScores.poor) &&
        Objects.equals(this.good, analyticsFeedbackScores.good);
  }

  @Override
  public int hashCode() {
    return Objects.hash(great, okay, bad, poor, good);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsFeedbackScores {\n");
    
    sb.append("    great: ").append(toIndentedString(great)).append("\n");
    sb.append("    okay: ").append(toIndentedString(okay)).append("\n");
    sb.append("    bad: ").append(toIndentedString(bad)).append("\n");
    sb.append("    poor: ").append(toIndentedString(poor)).append("\n");
    sb.append("    good: ").append(toIndentedString(good)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

