/**
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use on of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Meeting', 'model/Error', 'model/Content'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Meeting'), require('../model/Error'), require('../model/Content'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueJeansOnVideoRestApi) {
      root.BlueJeansOnVideoRestApi = {};
    }
    root.BlueJeansOnVideoRestApi.RecordingApi = factory(root.BlueJeansOnVideoRestApi.ApiClient, root.BlueJeansOnVideoRestApi.Meeting, root.BlueJeansOnVideoRestApi.Error, root.BlueJeansOnVideoRestApi.Content);
  }
}(this, function(ApiClient, Meeting, Error, Content) {
  'use strict';

  /**
   * Recording service.
   * @module api/RecordingApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RecordingApi. 
   * @alias module:api/RecordingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getMeetingRecordings operation.
     * @callback module:api/RecordingApi~getMeetingRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Recordings for a Specified Meeting ID
     * This endpoint lists the recordings for a meeting.
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Integer} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:api/RecordingApi~getMeetingRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.getMeetingRecordings = function(userId, meetingId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getMeetingRecordings";
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId == undefined || meetingId == null) {
        throw "Missing the required parameter 'meetingId' when calling getMeetingRecordings";
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/live_meetings/{meeting_id}/recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingContent operation.
     * @callback module:api/RecordingApi~getRecordingContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recording Download Link
     * This endpoint retrieves properties about the recording chapter.
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Integer} contentId The recording properties fetched with other API endpoints will return a compositeContentId or a contentId. That value can be used for this argument.
     * @param {module:api/RecordingApi~getRecordingContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Content}
     */
    this.getRecordingContent = function(userId, contentId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getRecordingContent";
      }

      // verify the required parameter 'contentId' is set
      if (contentId == undefined || contentId == null) {
        throw "Missing the required parameter 'contentId' when calling getRecordingContent";
      }


      var pathParams = {
        'user_id': userId,
        'content_id': contentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Content;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/cms/{content_id}?isDownloadable=true', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startRecording operation.
     * @callback module:api/RecordingApi~startRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Recording
     * This endpoint starts recording for a meeting in progress.
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Integer} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:api/RecordingApi~startRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startRecording = function(userId, meetingId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling startRecording";
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId == undefined || meetingId == null) {
        throw "Missing the required parameter 'meetingId' when calling startRecording";
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/live_meetings/{meeting_id}/recordings/?action=start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRecording operation.
     * @callback module:api/RecordingApi~stopRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop Recording
     * This endpoint stops recording for a meeting in progress.
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Integer} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:api/RecordingApi~stopRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stopRecording = function(userId, meetingId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling stopRecording";
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId == undefined || meetingId == null) {
        throw "Missing the required parameter 'meetingId' when calling stopRecording";
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/live_meetings/{meeting_id}/recordings?action=stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGet operation.
     * @callback module:api/RecordingApi~v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Recordings for a Specified Meeting GUID
     * This endpoint stops recording for a meeting in progress.
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Integer} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/RecordingApi~v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGet = function(userId, meetingId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGet";
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId == undefined || meetingId == null) {
        throw "Missing the required parameter 'meetingId' when calling v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGet";
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid == undefined || meetingGuid == null) {
        throw "Missing the required parameter 'meetingGuid' when calling v1UserUserIdLiveMeetingsMeetingIdRecordingsmeetingGuidmeetingGuidGet";
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId,
        'meeting_guid': meetingGuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/live_meetings/{meeting_id}/recordings?meetingGuid={meeting_guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserUserIdMeetingHistoryMeetingGuidRecordingsDelete operation.
     * @callback module:api/RecordingApi~v1UserUserIdMeetingHistoryMeetingGuidRecordingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Recordings for a Specified Meeting GUID
     * This endpoint stops recording for a meeting in progress. 
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingGuid The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest.
     * @param {module:api/RecordingApi~v1UserUserIdMeetingHistoryMeetingGuidRecordingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.v1UserUserIdMeetingHistoryMeetingGuidRecordingsDelete = function(userId, meetingGuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling v1UserUserIdMeetingHistoryMeetingGuidRecordingsDelete";
      }

      // verify the required parameter 'meetingGuid' is set
      if (meetingGuid == undefined || meetingGuid == null) {
        throw "Missing the required parameter 'meetingGuid' when calling v1UserUserIdMeetingHistoryMeetingGuidRecordingsDelete";
      }


      var pathParams = {
        'user_id': userId,
        'meeting_guid': meetingGuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_guid}/recordings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDelete operation.
     * @callback module:api/RecordingApi~v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Specified Recording Chapter
     * This endpoint stops recording for a meeting in progress.
     * @param {Integer} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {Integer} meetingId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {Integer} recordingChapterId The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property.
     * @param {module:api/RecordingApi~v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDelete = function(userId, meetingId, recordingChapterId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDelete";
      }

      // verify the required parameter 'meetingId' is set
      if (meetingId == undefined || meetingId == null) {
        throw "Missing the required parameter 'meetingId' when calling v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDelete";
      }

      // verify the required parameter 'recordingChapterId' is set
      if (recordingChapterId == undefined || recordingChapterId == null) {
        throw "Missing the required parameter 'recordingChapterId' when calling v1UserUserIdMeetingHistoryMeetingIdRecordingsRecordingChapterIdDelete";
      }


      var pathParams = {
        'user_id': userId,
        'meeting_id': meetingId,
        'recording_chapter_id': recordingChapterId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/meeting_history/{meeting_id}/recordings/{recording_chapter_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
