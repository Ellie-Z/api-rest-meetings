/**
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use on of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/MeetingExtendedIndigo', 'model/MeetingIndigoList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/MeetingExtendedIndigo'), require('../model/MeetingIndigoList'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueJeansOnVideoRestApi) {
      root.BlueJeansOnVideoRestApi = {};
    }
    root.BlueJeansOnVideoRestApi.CommandCenterApi = factory(root.BlueJeansOnVideoRestApi.ApiClient, root.BlueJeansOnVideoRestApi.Error, root.BlueJeansOnVideoRestApi.MeetingExtendedIndigo, root.BlueJeansOnVideoRestApi.MeetingIndigoList);
  }
}(this, function(ApiClient, Error, MeetingExtendedIndigo, MeetingIndigoList) {
  'use strict';

  /**
   * CommandCenter service.
   * @module api/CommandCenterApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CommandCenterApi. 
   * @alias module:api/CommandCenterApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getMeetingLiveByEnterprise operation.
     * @callback module:api/CommandCenterApi~getMeetingLiveByEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingExtendedIndigo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Live Meeting Endpoints by Enterprise
     * This endpoint lists endpoints for a given meeting in progress.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {String} meetingUuid The universally unique identifier (UUID) of the meeting of interest. This value is a string which contains 6 alphanumeric segments separated by dashes.
     * @param {module:api/CommandCenterApi~getMeetingLiveByEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingExtendedIndigo}
     */
    this.getMeetingLiveByEnterprise = function(enterpriseId, meetingUuid, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId == undefined || enterpriseId == null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling getMeetingLiveByEnterprise");
      }

      // verify the required parameter 'meetingUuid' is set
      if (meetingUuid == undefined || meetingUuid == null) {
        throw new Error("Missing the required parameter 'meetingUuid' when calling getMeetingLiveByEnterprise");
      }


      var pathParams = {
        'enterprise_id': enterpriseId,
        'meeting_uuid': meetingUuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingExtendedIndigo;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/indigo/meetings/live/{meeting_uuid}/endpoints/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeetingPastByEnterprise operation.
     * @callback module:api/CommandCenterApi~getMeetingPastByEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingExtendedIndigo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Meeting Endpoints &amp; Stats by Enterprise
     * This endpoint lists meeting endpoints for completed meetings by enterprise.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {String} meetingUuid The universally unique identifier (UUID) of the meeting of interest. This value is a string which contains 6 alphanumeric segments separated by dashes.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeEndpoints Option to include detailed data on endpoints
     * @param {module:api/CommandCenterApi~getMeetingPastByEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingExtendedIndigo}
     */
    this.getMeetingPastByEnterprise = function(enterpriseId, meetingUuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId == undefined || enterpriseId == null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling getMeetingPastByEnterprise");
      }

      // verify the required parameter 'meetingUuid' is set
      if (meetingUuid == undefined || meetingUuid == null) {
        throw new Error("Missing the required parameter 'meetingUuid' when calling getMeetingPastByEnterprise");
      }


      var pathParams = {
        'enterprise_id': enterpriseId,
        'meeting_uuid': meetingUuid
      };
      var queryParams = {
        'includeEndpoints': opts['includeEndpoints']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingExtendedIndigo;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/indigo/meetings/{meeting_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeetingPastByUser operation.
     * @callback module:api/CommandCenterApi~getMeetingPastByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingExtendedIndigo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Meeting Endpoints &amp; Stats by User
     * This endpoint lists meeting endpoints for completed meetings by user.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {String} meetingUuid The universally unique identifier (UUID) of the meeting of interest. This value is a string which contains 6 alphanumeric segments separated by dashes.
     * @param {module:api/CommandCenterApi~getMeetingPastByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingExtendedIndigo}
     */
    this.getMeetingPastByUser = function(userId, meetingUuid, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getMeetingPastByUser");
      }

      // verify the required parameter 'meetingUuid' is set
      if (meetingUuid == undefined || meetingUuid == null) {
        throw new Error("Missing the required parameter 'meetingUuid' when calling getMeetingPastByUser");
      }


      var pathParams = {
        'user_id': userId,
        'meeting_uuid': meetingUuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingExtendedIndigo;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/indigo/meetings/{meeting_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeetingsLiveByEnterprise operation.
     * @callback module:api/CommandCenterApi~getMeetingsLiveByEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingIndigoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Live Meetings Summary by Enterprise
     * This endpoint lists meetings in progress by enterprise.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {module:api/CommandCenterApi~getMeetingsLiveByEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingIndigoList}
     */
    this.getMeetingsLiveByEnterprise = function(enterpriseId, callback) {
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId == undefined || enterpriseId == null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling getMeetingsLiveByEnterprise");
      }


      var pathParams = {
        'enterprise_id': enterpriseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingIndigoList;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/indigo/meetings/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeetingsPastByEnterprise operation.
     * @callback module:api/CommandCenterApi~getMeetingsPastByEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingIndigoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Past Meetings by Enterprise
     * This endpoint lists completed meetings by enterprise.
     * @param {Number} enterpriseId The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Page Number
     * @param {Number} opts.limit Per page
     * @param {String} opts.filter URL-encoded JSON string
     * @param {module:api/CommandCenterApi~getMeetingsPastByEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingIndigoList}
     */
    this.getMeetingsPastByEnterprise = function(enterpriseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId == undefined || enterpriseId == null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling getMeetingsPastByEnterprise");
      }


      var pathParams = {
        'enterprise_id': enterpriseId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingIndigoList;

      return this.apiClient.callApi(
        '/v1/enterprise/{enterprise_id}/indigo/meetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeetingsPastByUser operation.
     * @callback module:api/CommandCenterApi~getMeetingsPastByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingIndigoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Past Meetings by User
     * This endpoint lists completed meetings by user.
     * @param {Number} userId The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint.
     * @param {module:api/CommandCenterApi~getMeetingsPastByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingIndigoList}
     */
    this.getMeetingsPastByUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getMeetingsPastByUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeetingIndigoList;

      return this.apiClient.callApi(
        '/v1/user/{user_id}/indigo/meetings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
