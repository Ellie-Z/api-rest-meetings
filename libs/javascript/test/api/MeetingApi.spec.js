/**
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 4 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to perform operations. * Password Credentials Grant – Authenticate with a username and password and receive an access token with user level permission. Known as two-legged OAuth. * Meeting Credentials Grant – Authenticate with a meeting ID and meeting passcode and receive an access token with meeting level permission. Known as two-legged OAuth. * Client Credentials Grant –  Authenticate with a client ID and client secret and receive an access token with enterprise level permission. Known as two-legged OAuth. * Authorization Code Grant – After creating a developer application, users witll authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access token. Known as three-legged OAuth. ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – Scope of APIs is limited to individual meetings. * User-level – Scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users. All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlueJeansOnVideoRestApi);
  }
}(this, function(expect, BlueJeansOnVideoRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlueJeansOnVideoRestApi.MeetingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingApi', function() {
    describe('cancelMeeting', function() {
      it('should call cancelMeeting successfully', function(done) {
        //uncomment below and update the code to test cancelMeeting
        //instance.cancelMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMeeting', function() {
      it('should call createMeeting successfully', function(done) {
        //uncomment below and update the code to test createMeeting
        //instance.createMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePairingCodeSip', function() {
      it('should call generatePairingCodeSip successfully', function(done) {
        //uncomment below and update the code to test generatePairingCodeSip
        //instance.generatePairingCodeSip(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePairingCodeWebRtc', function() {
      it('should call generatePairingCodeWebRtc successfully', function(done) {
        //uncomment below and update the code to test generatePairingCodeWebRtc
        //instance.generatePairingCodeWebRtc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointLayout', function() {
      it('should call getEndpointLayout successfully', function(done) {
        //uncomment below and update the code to test getEndpointLayout
        //instance.getEndpointLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeeting', function() {
      it('should call getMeeting successfully', function(done) {
        //uncomment below and update the code to test getMeeting
        //instance.getMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEmails', function() {
      it('should call getMeetingEmails successfully', function(done) {
        //uncomment below and update the code to test getMeetingEmails
        //instance.getMeetingEmails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEndpoint', function() {
      it('should call getMeetingEndpoint successfully', function(done) {
        //uncomment below and update the code to test getMeetingEndpoint
        //instance.getMeetingEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingEndpoints', function() {
      it('should call getMeetingEndpoints successfully', function(done) {
        //uncomment below and update the code to test getMeetingEndpoints
        //instance.getMeetingEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingNumbers', function() {
      it('should call getMeetingNumbers successfully', function(done) {
        //uncomment below and update the code to test getMeetingNumbers
        //instance.getMeetingNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeetingState', function() {
      it('should call getMeetingState successfully', function(done) {
        //uncomment below and update the code to test getMeetingState
        //instance.getMeetingState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMeetings', function() {
      it('should call listMeetings successfully', function(done) {
        //uncomment below and update the code to test listMeetings
        //instance.listMeetings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMeetingInvite', function() {
      it('should call sendMeetingInvite successfully', function(done) {
        //uncomment below and update the code to test sendMeetingInvite
        //instance.sendMeetingInvite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEndpointLayout', function() {
      it('should call updateEndpointLayout successfully', function(done) {
        //uncomment below and update the code to test updateEndpointLayout
        //instance.updateEndpointLayout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeeting', function() {
      it('should call updateMeeting successfully', function(done) {
        //uncomment below and update the code to test updateMeeting
        //instance.updateMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingEndpoint', function() {
      it('should call updateMeetingEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateMeetingEndpoint
        //instance.updateMeetingEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingEndpoints', function() {
      it('should call updateMeetingEndpoints successfully', function(done) {
        //uncomment below and update the code to test updateMeetingEndpoints
        //instance.updateMeetingEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMeetingState', function() {
      it('should call updateMeetingState successfully', function(done) {
        //uncomment below and update the code to test updateMeetingState
        //instance.updateMeetingState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
