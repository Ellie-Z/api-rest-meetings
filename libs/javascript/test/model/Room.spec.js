/**
 * BlueJeans onVideo REST API
 * _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authorize button up in the header to store the token. Each BlueJeans API called after that will use the access token provided. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon@bluejeans.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlueJeansOnVideoRestApi);
  }
}(this, function(expect, BlueJeansOnVideoRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlueJeansOnVideoRestApi.Room();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Room', function() {
    it('should create an instance of Room', function() {
      // uncomment below and update the code to test Room
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be.a(BlueJeansOnVideoRestApi.Room);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property numericId (base name: "numericId")', function() {
      // uncomment below and update the code to test the property numericId
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property originPopId (base name: "originPopId")', function() {
      // uncomment below and update the code to test the property originPopId
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property isLargeMeeting (base name: "isLargeMeeting")', function() {
      // uncomment below and update the code to test the property isLargeMeeting
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property showVideoAnimations (base name: "showVideoAnimations")', function() {
      // uncomment below and update the code to test the property showVideoAnimations
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property backgroundImage (base name: "backgroundImage")', function() {
      // uncomment below and update the code to test the property backgroundImage
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property isModeratorLess (base name: "isModeratorLess")', function() {
      // uncomment below and update the code to test the property isModeratorLess
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property welcomeMessage (base name: "welcomeMessage")', function() {
      // uncomment below and update the code to test the property welcomeMessage
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property disallowChat (base name: "disallowChat")', function() {
      // uncomment below and update the code to test the property disallowChat
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property encryptionType (base name: "encryptionType")', function() {
      // uncomment below and update the code to test the property encryptionType
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property showAllParticipantsInIcs (base name: "showAllParticipantsInIcs")', function() {
      // uncomment below and update the code to test the property showAllParticipantsInIcs
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property participantPasscode (base name: "participantPasscode")', function() {
      // uncomment below and update the code to test the property participantPasscode
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property publishMeeting (base name: "publishMeeting")', function() {
      // uncomment below and update the code to test the property publishMeeting
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property moderatorLess (base name: "moderatorLess")', function() {
      // uncomment below and update the code to test the property moderatorLess
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property videoBestFit (base name: "videoBestFit")', function() {
      // uncomment below and update the code to test the property videoBestFit
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property muteParticipantsOnEntry (base name: "muteParticipantsOnEntry")', function() {
      // uncomment below and update the code to test the property muteParticipantsOnEntry
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property enforceMeetingEncryption (base name: "enforceMeetingEncryption")', function() {
      // uncomment below and update the code to test the property enforceMeetingEncryption
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property enforceMeetingEncryptionAllowPSTN (base name: "enforceMeetingEncryptionAllowPSTN")', function() {
      // uncomment below and update the code to test the property enforceMeetingEncryptionAllowPSTN
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property idleTimeout (base name: "idleTimeout")', function() {
      // uncomment below and update the code to test the property idleTimeout
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property defaultLayout (base name: "defaultLayout")', function() {
      // uncomment below and update the code to test the property defaultLayout
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property playAudioAlerts (base name: "playAudioAlerts")', function() {
      // uncomment below and update the code to test the property playAudioAlerts
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property personalMeetingId (base name: "personalMeetingId")', function() {
      // uncomment below and update the code to test the property personalMeetingId
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

    it('should have the property moderatorPasscode (base name: "moderatorPasscode")', function() {
      // uncomment below and update the code to test the property moderatorPasscode
      //var instane = new BlueJeansOnVideoRestApi.Room();
      //expect(instance).to.be();
    });

  });

}));
