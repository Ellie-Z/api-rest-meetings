# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authenticate button up in the header to store the token. Each BlueJeans API called after that will use the access token provided. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Meeting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title='My Test Meeting', description=None, start=None, end=None, timezone='America/New_York', end_point_version='2.10', end_point_type='WEB_APP', advanced_meeting_options=None):
        """
        Meeting - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'title': 'str',
            'description': 'str',
            'start': 'int',
            'end': 'int',
            'timezone': 'str',
            'numeric_meeting_id': 'str',
            'attendee_passcode': 'str',
            'end_point_version': 'str',
            'end_point_type': 'str',
            'advanced_meeting_options': 'MeetingAdvancedMeetingOptions'
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'start': 'start',
            'end': 'end',
            'timezone': 'timezone',
            'numeric_meeting_id': 'numericMeetingId',
            'attendee_passcode': 'attendeePasscode',
            'end_point_version': 'endPointVersion',
            'end_point_type': 'endPointType',
            'advanced_meeting_options': 'advancedMeetingOptions'
        }

        self._id = None
        self._numeric_meeting_id = None
        self._attendee_passcode = None
        self._title = title
        self._description = description
        self._start = start
        self._end = end
        self._timezone = timezone
        self._end_point_version = end_point_version
        self._end_point_type = end_point_type
        self._advanced_meeting_options = advanced_meeting_options

    @property
    def id(self):
        """
        Gets the id of this Meeting.
        Unique identifier for meeting.

        :return: The id of this Meeting.
        :rtype: int
        """
        return self._id

    @property
    def title(self):
        """
        Gets the title of this Meeting.


        :return: The title of this Meeting.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Meeting.


        :param title: The title of this Meeting.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this Meeting.


        :return: The description of this Meeting.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Meeting.


        :param description: The description of this Meeting.
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """
        Gets the start of this Meeting.
        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds

        :return: The start of this Meeting.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this Meeting.
        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds

        :param start: The start of this Meeting.
        :type: int
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this Meeting.
        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds

        :return: The end of this Meeting.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this Meeting.
        A [UNIX Timestamp](https://currentmillis.com/) in milliseconds

        :param end: The end of this Meeting.
        :type: int
        """

        self._end = end

    @property
    def timezone(self):
        """
        Gets the timezone of this Meeting.


        :return: The timezone of this Meeting.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this Meeting.


        :param timezone: The timezone of this Meeting.
        :type: str
        """

        self._timezone = timezone

    @property
    def numeric_meeting_id(self):
        """
        Gets the numeric_meeting_id of this Meeting.


        :return: The numeric_meeting_id of this Meeting.
        :rtype: str
        """
        return self._numeric_meeting_id

    @property
    def attendee_passcode(self):
        """
        Gets the attendee_passcode of this Meeting.


        :return: The attendee_passcode of this Meeting.
        :rtype: str
        """
        return self._attendee_passcode

    @property
    def end_point_version(self):
        """
        Gets the end_point_version of this Meeting.


        :return: The end_point_version of this Meeting.
        :rtype: str
        """
        return self._end_point_version

    @end_point_version.setter
    def end_point_version(self, end_point_version):
        """
        Sets the end_point_version of this Meeting.


        :param end_point_version: The end_point_version of this Meeting.
        :type: str
        """

        self._end_point_version = end_point_version

    @property
    def end_point_type(self):
        """
        Gets the end_point_type of this Meeting.


        :return: The end_point_type of this Meeting.
        :rtype: str
        """
        return self._end_point_type

    @end_point_type.setter
    def end_point_type(self, end_point_type):
        """
        Sets the end_point_type of this Meeting.


        :param end_point_type: The end_point_type of this Meeting.
        :type: str
        """

        self._end_point_type = end_point_type

    @property
    def advanced_meeting_options(self):
        """
        Gets the advanced_meeting_options of this Meeting.


        :return: The advanced_meeting_options of this Meeting.
        :rtype: MeetingAdvancedMeetingOptions
        """
        return self._advanced_meeting_options

    @advanced_meeting_options.setter
    def advanced_meeting_options(self, advanced_meeting_options):
        """
        Sets the advanced_meeting_options of this Meeting.


        :param advanced_meeting_options: The advanced_meeting_options of this Meeting.
        :type: MeetingAdvancedMeetingOptions
        """

        self._advanced_meeting_options = advanced_meeting_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
