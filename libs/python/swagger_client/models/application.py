# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\"). ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Application(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, app_name=None, app_logo_url=None, redirect_urls=None, user_id=None, client_id=None, client_secret=None):
        """
        Application - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'app_name': 'str',
            'app_logo_url': 'str',
            'redirect_urls': 'list[str]',
            'user_id': 'str',
            'client_id': 'str',
            'client_secret': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'app_name': 'appName',
            'app_logo_url': 'appLogoUrl',
            'redirect_urls': 'redirectUrls',
            'user_id': 'userId',
            'client_id': 'clientId',
            'client_secret': 'clientSecret'
        }

        self._description = description
        self._app_name = app_name
        self._app_logo_url = app_logo_url
        self._redirect_urls = redirect_urls
        self._user_id = user_id
        self._client_id = client_id
        self._client_secret = client_secret

    @property
    def description(self):
        """
        Gets the description of this Application.
        A summary of the client application.

        :return: The description of this Application.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Application.
        A summary of the client application.

        :param description: The description of this Application.
        :type: str
        """

        self._description = description

    @property
    def app_name(self):
        """
        Gets the app_name of this Application.
        The name of the client application.

        :return: The app_name of this Application.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """
        Sets the app_name of this Application.
        The name of the client application.

        :param app_name: The app_name of this Application.
        :type: str
        """

        self._app_name = app_name

    @property
    def app_logo_url(self):
        """
        Gets the app_logo_url of this Application.
        A URL of an image that will be displayed to users during authorization.

        :return: The app_logo_url of this Application.
        :rtype: str
        """
        return self._app_logo_url

    @app_logo_url.setter
    def app_logo_url(self, app_logo_url):
        """
        Sets the app_logo_url of this Application.
        A URL of an image that will be displayed to users during authorization.

        :param app_logo_url: The app_logo_url of this Application.
        :type: str
        """

        self._app_logo_url = app_logo_url

    @property
    def redirect_urls(self):
        """
        Gets the redirect_urls of this Application.

        :return: The redirect_urls of this Application.
        :rtype: list[str]
        """
        return self._redirect_urls

    @redirect_urls.setter
    def redirect_urls(self, redirect_urls):
        """
        Sets the redirect_urls of this Application.

        :param redirect_urls: The redirect_urls of this Application.
        :type: list[str]
        """

        self._redirect_urls = redirect_urls

    @property
    def user_id(self):
        """
        Gets the user_id of this Application.
        The user ID of the owner of the client application.

        :return: The user_id of this Application.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Application.
        The user ID of the owner of the client application.

        :param user_id: The user_id of this Application.
        :type: str
        """

        self._user_id = user_id

    @property
    def client_id(self):
        """
        Gets the client_id of this Application.
        The client ID will be generated on creation of the application. Normally, a 32 character hexidecimal numeric string.

        :return: The client_id of this Application.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Application.
        The client ID will be generated on creation of the application. Normally, a 32 character hexidecimal numeric string.

        :param client_id: The client_id of this Application.
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """
        Gets the client_secret of this Application.
        The client secret will be generated on creation of the application. Retain this value as it will only be revealed one time. If lost, you will need to regenerate.

        :return: The client_secret of this Application.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this Application.
        The client secret will be generated on creation of the application. Retain this value as it will only be revealed one time. If lost, you will need to regenerate.

        :param client_secret: The client_secret of this Application.
        :type: str
        """

        self._client_secret = client_secret

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
