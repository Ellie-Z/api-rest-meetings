# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use on of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NumbersNumbers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, number=None, tollfree=None, premium=None, custom=None, country=None, country_name=None, state=None, city=None, label=None, default_settings_inherited=None, default=None):
        """
        NumbersNumbers - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'number': 'str',
            'tollfree': 'bool',
            'premium': 'bool',
            'custom': 'bool',
            'country': 'str',
            'country_name': 'str',
            'state': 'str',
            'city': 'str',
            'label': 'NumbersLabel',
            'default_settings_inherited': 'bool',
            'default': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'number': 'number',
            'tollfree': 'tollfree',
            'premium': 'premium',
            'custom': 'custom',
            'country': 'country',
            'country_name': 'countryName',
            'state': 'state',
            'city': 'city',
            'label': 'label',
            'default_settings_inherited': 'defaultSettingsInherited',
            'default': 'default'
        }

        self._id = id
        self._number = number
        self._tollfree = tollfree
        self._premium = premium
        self._custom = custom
        self._country = country
        self._country_name = country_name
        self._state = state
        self._city = city
        self._label = label
        self._default_settings_inherited = default_settings_inherited
        self._default = default

    @property
    def id(self):
        """
        Gets the id of this NumbersNumbers.


        :return: The id of this NumbersNumbers.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NumbersNumbers.


        :param id: The id of this NumbersNumbers.
        :type: int
        """

        self._id = id

    @property
    def number(self):
        """
        Gets the number of this NumbersNumbers.


        :return: The number of this NumbersNumbers.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this NumbersNumbers.


        :param number: The number of this NumbersNumbers.
        :type: str
        """

        self._number = number

    @property
    def tollfree(self):
        """
        Gets the tollfree of this NumbersNumbers.


        :return: The tollfree of this NumbersNumbers.
        :rtype: bool
        """
        return self._tollfree

    @tollfree.setter
    def tollfree(self, tollfree):
        """
        Sets the tollfree of this NumbersNumbers.


        :param tollfree: The tollfree of this NumbersNumbers.
        :type: bool
        """

        self._tollfree = tollfree

    @property
    def premium(self):
        """
        Gets the premium of this NumbersNumbers.


        :return: The premium of this NumbersNumbers.
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """
        Sets the premium of this NumbersNumbers.


        :param premium: The premium of this NumbersNumbers.
        :type: bool
        """

        self._premium = premium

    @property
    def custom(self):
        """
        Gets the custom of this NumbersNumbers.


        :return: The custom of this NumbersNumbers.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """
        Sets the custom of this NumbersNumbers.


        :param custom: The custom of this NumbersNumbers.
        :type: bool
        """

        self._custom = custom

    @property
    def country(self):
        """
        Gets the country of this NumbersNumbers.


        :return: The country of this NumbersNumbers.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this NumbersNumbers.


        :param country: The country of this NumbersNumbers.
        :type: str
        """

        self._country = country

    @property
    def country_name(self):
        """
        Gets the country_name of this NumbersNumbers.


        :return: The country_name of this NumbersNumbers.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """
        Sets the country_name of this NumbersNumbers.


        :param country_name: The country_name of this NumbersNumbers.
        :type: str
        """

        self._country_name = country_name

    @property
    def state(self):
        """
        Gets the state of this NumbersNumbers.


        :return: The state of this NumbersNumbers.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this NumbersNumbers.


        :param state: The state of this NumbersNumbers.
        :type: str
        """

        self._state = state

    @property
    def city(self):
        """
        Gets the city of this NumbersNumbers.


        :return: The city of this NumbersNumbers.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this NumbersNumbers.


        :param city: The city of this NumbersNumbers.
        :type: str
        """

        self._city = city

    @property
    def label(self):
        """
        Gets the label of this NumbersNumbers.


        :return: The label of this NumbersNumbers.
        :rtype: NumbersLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this NumbersNumbers.


        :param label: The label of this NumbersNumbers.
        :type: NumbersLabel
        """

        self._label = label

    @property
    def default_settings_inherited(self):
        """
        Gets the default_settings_inherited of this NumbersNumbers.


        :return: The default_settings_inherited of this NumbersNumbers.
        :rtype: bool
        """
        return self._default_settings_inherited

    @default_settings_inherited.setter
    def default_settings_inherited(self, default_settings_inherited):
        """
        Sets the default_settings_inherited of this NumbersNumbers.


        :param default_settings_inherited: The default_settings_inherited of this NumbersNumbers.
        :type: bool
        """

        self._default_settings_inherited = default_settings_inherited

    @property
    def default(self):
        """
        Gets the default of this NumbersNumbers.


        :return: The default of this NumbersNumbers.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this NumbersNumbers.


        :param default: The default of this NumbersNumbers.
        :type: bool
        """

        self._default = default

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
