# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use on of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Numbers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, meeting_id=None, allow_direct_dial=None, use_attendee_passcode=None, pstn_numbers_url=None, moderator_passcode=None, precision=None, pstn_localization_supported=None, partner_integrated_meeting=None, numbers=None):
        """
        Numbers - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'meeting_id': 'str',
            'allow_direct_dial': 'bool',
            'use_attendee_passcode': 'bool',
            'pstn_numbers_url': 'str',
            'moderator_passcode': 'str',
            'precision': 'str',
            'pstn_localization_supported': 'bool',
            'partner_integrated_meeting': 'bool',
            'numbers': 'list[NumbersNumbers]'
        }

        self.attribute_map = {
            'meeting_id': 'meetingId',
            'allow_direct_dial': 'allowDirectDial',
            'use_attendee_passcode': 'useAttendeePasscode',
            'pstn_numbers_url': 'pstnNumbersUrl',
            'moderator_passcode': 'moderatorPasscode',
            'precision': 'precision',
            'pstn_localization_supported': 'pstnLocalizationSupported',
            'partner_integrated_meeting': 'partnerIntegratedMeeting',
            'numbers': 'numbers'
        }

        self._meeting_id = meeting_id
        self._allow_direct_dial = allow_direct_dial
        self._use_attendee_passcode = use_attendee_passcode
        self._pstn_numbers_url = pstn_numbers_url
        self._moderator_passcode = moderator_passcode
        self._precision = precision
        self._pstn_localization_supported = pstn_localization_supported
        self._partner_integrated_meeting = partner_integrated_meeting
        self._numbers = numbers

    @property
    def meeting_id(self):
        """
        Gets the meeting_id of this Numbers.

        :return: The meeting_id of this Numbers.
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """
        Sets the meeting_id of this Numbers.

        :param meeting_id: The meeting_id of this Numbers.
        :type: str
        """

        self._meeting_id = meeting_id

    @property
    def allow_direct_dial(self):
        """
        Gets the allow_direct_dial of this Numbers.

        :return: The allow_direct_dial of this Numbers.
        :rtype: bool
        """
        return self._allow_direct_dial

    @allow_direct_dial.setter
    def allow_direct_dial(self, allow_direct_dial):
        """
        Sets the allow_direct_dial of this Numbers.

        :param allow_direct_dial: The allow_direct_dial of this Numbers.
        :type: bool
        """

        self._allow_direct_dial = allow_direct_dial

    @property
    def use_attendee_passcode(self):
        """
        Gets the use_attendee_passcode of this Numbers.

        :return: The use_attendee_passcode of this Numbers.
        :rtype: bool
        """
        return self._use_attendee_passcode

    @use_attendee_passcode.setter
    def use_attendee_passcode(self, use_attendee_passcode):
        """
        Sets the use_attendee_passcode of this Numbers.

        :param use_attendee_passcode: The use_attendee_passcode of this Numbers.
        :type: bool
        """

        self._use_attendee_passcode = use_attendee_passcode

    @property
    def pstn_numbers_url(self):
        """
        Gets the pstn_numbers_url of this Numbers.

        :return: The pstn_numbers_url of this Numbers.
        :rtype: str
        """
        return self._pstn_numbers_url

    @pstn_numbers_url.setter
    def pstn_numbers_url(self, pstn_numbers_url):
        """
        Sets the pstn_numbers_url of this Numbers.

        :param pstn_numbers_url: The pstn_numbers_url of this Numbers.
        :type: str
        """

        self._pstn_numbers_url = pstn_numbers_url

    @property
    def moderator_passcode(self):
        """
        Gets the moderator_passcode of this Numbers.

        :return: The moderator_passcode of this Numbers.
        :rtype: str
        """
        return self._moderator_passcode

    @moderator_passcode.setter
    def moderator_passcode(self, moderator_passcode):
        """
        Sets the moderator_passcode of this Numbers.

        :param moderator_passcode: The moderator_passcode of this Numbers.
        :type: str
        """

        self._moderator_passcode = moderator_passcode

    @property
    def precision(self):
        """
        Gets the precision of this Numbers.

        :return: The precision of this Numbers.
        :rtype: str
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """
        Sets the precision of this Numbers.

        :param precision: The precision of this Numbers.
        :type: str
        """

        self._precision = precision

    @property
    def pstn_localization_supported(self):
        """
        Gets the pstn_localization_supported of this Numbers.

        :return: The pstn_localization_supported of this Numbers.
        :rtype: bool
        """
        return self._pstn_localization_supported

    @pstn_localization_supported.setter
    def pstn_localization_supported(self, pstn_localization_supported):
        """
        Sets the pstn_localization_supported of this Numbers.

        :param pstn_localization_supported: The pstn_localization_supported of this Numbers.
        :type: bool
        """

        self._pstn_localization_supported = pstn_localization_supported

    @property
    def partner_integrated_meeting(self):
        """
        Gets the partner_integrated_meeting of this Numbers.

        :return: The partner_integrated_meeting of this Numbers.
        :rtype: bool
        """
        return self._partner_integrated_meeting

    @partner_integrated_meeting.setter
    def partner_integrated_meeting(self, partner_integrated_meeting):
        """
        Sets the partner_integrated_meeting of this Numbers.

        :param partner_integrated_meeting: The partner_integrated_meeting of this Numbers.
        :type: bool
        """

        self._partner_integrated_meeting = partner_integrated_meeting

    @property
    def numbers(self):
        """
        Gets the numbers of this Numbers.

        :return: The numbers of this Numbers.
        :rtype: list[NumbersNumbers]
        """
        return self._numbers

    @numbers.setter
    def numbers(self, numbers):
        """
        Sets the numbers of this Numbers.

        :param numbers: The numbers of this Numbers.
        :type: list[NumbersNumbers]
        """

        self._numbers = numbers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Numbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
