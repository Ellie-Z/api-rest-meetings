# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do, from the world's leader in cloud video communication._ # Authentication Each API request that is sent to BlueJeans requires an access token, which is obtained through the BlueJeans Authentication API. There are several methods (grant types) for obtaining an access token, which follow the OAuth2.0 specification. ## Grant Types * Authorization Code Grant – This grant type is used in an authentication flow commonly referred to as \"three-legged OAuth\". The user authenticates via a BlueJeans page, which provides an authorization code. This code, along with a few other elements, can be used to obtain an access code. * Password Credentials Grant – This grant type is used in a two-legged OAuth flow. Username and password are sent to retrieve an access code. * Client Credentials Grant – This grant type is used in a two-legged OAuth flow.  ## Access & Permissions The access level that is associated with each access token is referred to as the scope. There are three basic levels of access that BlueJeans allows, which affect the level of scope.  Three access levels exist within the Blue Jeans service today. * Meeting-level – Authentication takes place using a meeting ID and passcode, and the scope is limited to APIs that relate to the individual meeting. * User-level – Authentication either takes place via three-legged OAuth, or else a direct authorization token request containing a username or password. Access level depends on the requested scope permissions. * App-level – An application is provisioned either by BlueJeans personnel, or within the BlueJeans Enterprise Admin interface. When provisioning an app, a client key and secret are provided, which is then used to obtain an access token, via the BlueJeans Authentication API. The scope that is associated with the token will provide access to an entire enterprise and all of its users.  All endpoints in this document that require Enterprise Admin access will be marked as such. ## Testing In order to make effective use of this page, you will first use one of the authentication methods to obtain an access token. Once the token is given, use the Authenticate button up in the header to store the token. Each BlueJeans API called after that will use the access token provided. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RecordingRecordingChapters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, chapter_id=None, id=None, start_time_offset=None, end_time_offset=None, chapter_name=None, total_size=None, composite_content_id=None, composite_content_status=None, parent_recording_id=None, view_count=None, recording_sessions=None):
        """
        RecordingRecordingChapters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chapter_id': 'str',
            'id': 'int',
            'start_time_offset': 'int',
            'end_time_offset': 'int',
            'chapter_name': 'str',
            'total_size': 'int',
            'composite_content_id': 'int',
            'composite_content_status': 'str',
            'parent_recording_id': 'int',
            'view_count': 'int',
            'recording_sessions': 'list[RecordingRecordingSessions]'
        }

        self.attribute_map = {
            'chapter_id': 'chapterId',
            'id': 'id',
            'start_time_offset': 'startTimeOffset',
            'end_time_offset': 'endTimeOffset',
            'chapter_name': 'chapterName',
            'total_size': 'totalSize',
            'composite_content_id': 'compositeContentId',
            'composite_content_status': 'compositeContentStatus',
            'parent_recording_id': 'parentRecordingId',
            'view_count': 'viewCount',
            'recording_sessions': 'recordingSessions'
        }

        self._chapter_id = chapter_id
        self._id = id
        self._start_time_offset = start_time_offset
        self._end_time_offset = end_time_offset
        self._chapter_name = chapter_name
        self._total_size = total_size
        self._composite_content_id = composite_content_id
        self._composite_content_status = composite_content_status
        self._parent_recording_id = parent_recording_id
        self._view_count = view_count
        self._recording_sessions = recording_sessions

    @property
    def chapter_id(self):
        """
        Gets the chapter_id of this RecordingRecordingChapters.


        :return: The chapter_id of this RecordingRecordingChapters.
        :rtype: str
        """
        return self._chapter_id

    @chapter_id.setter
    def chapter_id(self, chapter_id):
        """
        Sets the chapter_id of this RecordingRecordingChapters.


        :param chapter_id: The chapter_id of this RecordingRecordingChapters.
        :type: str
        """

        self._chapter_id = chapter_id

    @property
    def id(self):
        """
        Gets the id of this RecordingRecordingChapters.


        :return: The id of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RecordingRecordingChapters.


        :param id: The id of this RecordingRecordingChapters.
        :type: int
        """

        self._id = id

    @property
    def start_time_offset(self):
        """
        Gets the start_time_offset of this RecordingRecordingChapters.


        :return: The start_time_offset of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._start_time_offset

    @start_time_offset.setter
    def start_time_offset(self, start_time_offset):
        """
        Sets the start_time_offset of this RecordingRecordingChapters.


        :param start_time_offset: The start_time_offset of this RecordingRecordingChapters.
        :type: int
        """

        self._start_time_offset = start_time_offset

    @property
    def end_time_offset(self):
        """
        Gets the end_time_offset of this RecordingRecordingChapters.


        :return: The end_time_offset of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._end_time_offset

    @end_time_offset.setter
    def end_time_offset(self, end_time_offset):
        """
        Sets the end_time_offset of this RecordingRecordingChapters.


        :param end_time_offset: The end_time_offset of this RecordingRecordingChapters.
        :type: int
        """

        self._end_time_offset = end_time_offset

    @property
    def chapter_name(self):
        """
        Gets the chapter_name of this RecordingRecordingChapters.


        :return: The chapter_name of this RecordingRecordingChapters.
        :rtype: str
        """
        return self._chapter_name

    @chapter_name.setter
    def chapter_name(self, chapter_name):
        """
        Sets the chapter_name of this RecordingRecordingChapters.


        :param chapter_name: The chapter_name of this RecordingRecordingChapters.
        :type: str
        """

        self._chapter_name = chapter_name

    @property
    def total_size(self):
        """
        Gets the total_size of this RecordingRecordingChapters.


        :return: The total_size of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """
        Sets the total_size of this RecordingRecordingChapters.


        :param total_size: The total_size of this RecordingRecordingChapters.
        :type: int
        """

        self._total_size = total_size

    @property
    def composite_content_id(self):
        """
        Gets the composite_content_id of this RecordingRecordingChapters.


        :return: The composite_content_id of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._composite_content_id

    @composite_content_id.setter
    def composite_content_id(self, composite_content_id):
        """
        Sets the composite_content_id of this RecordingRecordingChapters.


        :param composite_content_id: The composite_content_id of this RecordingRecordingChapters.
        :type: int
        """

        self._composite_content_id = composite_content_id

    @property
    def composite_content_status(self):
        """
        Gets the composite_content_status of this RecordingRecordingChapters.


        :return: The composite_content_status of this RecordingRecordingChapters.
        :rtype: str
        """
        return self._composite_content_status

    @composite_content_status.setter
    def composite_content_status(self, composite_content_status):
        """
        Sets the composite_content_status of this RecordingRecordingChapters.


        :param composite_content_status: The composite_content_status of this RecordingRecordingChapters.
        :type: str
        """

        self._composite_content_status = composite_content_status

    @property
    def parent_recording_id(self):
        """
        Gets the parent_recording_id of this RecordingRecordingChapters.


        :return: The parent_recording_id of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._parent_recording_id

    @parent_recording_id.setter
    def parent_recording_id(self, parent_recording_id):
        """
        Sets the parent_recording_id of this RecordingRecordingChapters.


        :param parent_recording_id: The parent_recording_id of this RecordingRecordingChapters.
        :type: int
        """

        self._parent_recording_id = parent_recording_id

    @property
    def view_count(self):
        """
        Gets the view_count of this RecordingRecordingChapters.


        :return: The view_count of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this RecordingRecordingChapters.


        :param view_count: The view_count of this RecordingRecordingChapters.
        :type: int
        """

        self._view_count = view_count

    @property
    def recording_sessions(self):
        """
        Gets the recording_sessions of this RecordingRecordingChapters.


        :return: The recording_sessions of this RecordingRecordingChapters.
        :rtype: list[RecordingRecordingSessions]
        """
        return self._recording_sessions

    @recording_sessions.setter
    def recording_sessions(self, recording_sessions):
        """
        Sets the recording_sessions of this RecordingRecordingChapters.


        :param recording_sessions: The recording_sessions of this RecordingRecordingChapters.
        :type: list[RecordingRecordingSessions]
        """

        self._recording_sessions = recording_sessions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
