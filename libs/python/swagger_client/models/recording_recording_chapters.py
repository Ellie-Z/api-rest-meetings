# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\"). ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RecordingRecordingChapters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, chapter_id=None, id=None, start_time_offset=None, end_time_offset=None, chapter_name=None, total_size=None, composite_content_id=None, composite_content_status=None, parent_recording_id=None, view_count=None, recording_sessions=None):
        """
        RecordingRecordingChapters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chapter_id': 'str',
            'id': 'int',
            'start_time_offset': 'int',
            'end_time_offset': 'int',
            'chapter_name': 'str',
            'total_size': 'int',
            'composite_content_id': 'int',
            'composite_content_status': 'str',
            'parent_recording_id': 'int',
            'view_count': 'int',
            'recording_sessions': 'list[RecordingSession]'
        }

        self.attribute_map = {
            'chapter_id': 'chapterId',
            'id': 'id',
            'start_time_offset': 'startTimeOffset',
            'end_time_offset': 'endTimeOffset',
            'chapter_name': 'chapterName',
            'total_size': 'totalSize',
            'composite_content_id': 'compositeContentId',
            'composite_content_status': 'compositeContentStatus',
            'parent_recording_id': 'parentRecordingId',
            'view_count': 'viewCount',
            'recording_sessions': 'recordingSessions'
        }

        self._chapter_id = chapter_id
        self._id = id
        self._start_time_offset = start_time_offset
        self._end_time_offset = end_time_offset
        self._chapter_name = chapter_name
        self._total_size = total_size
        self._composite_content_id = composite_content_id
        self._composite_content_status = composite_content_status
        self._parent_recording_id = parent_recording_id
        self._view_count = view_count
        self._recording_sessions = recording_sessions

    @property
    def chapter_id(self):
        """
        Gets the chapter_id of this RecordingRecordingChapters.

        :return: The chapter_id of this RecordingRecordingChapters.
        :rtype: str
        """
        return self._chapter_id

    @chapter_id.setter
    def chapter_id(self, chapter_id):
        """
        Sets the chapter_id of this RecordingRecordingChapters.

        :param chapter_id: The chapter_id of this RecordingRecordingChapters.
        :type: str
        """

        self._chapter_id = chapter_id

    @property
    def id(self):
        """
        Gets the id of this RecordingRecordingChapters.

        :return: The id of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RecordingRecordingChapters.

        :param id: The id of this RecordingRecordingChapters.
        :type: int
        """

        self._id = id

    @property
    def start_time_offset(self):
        """
        Gets the start_time_offset of this RecordingRecordingChapters.

        :return: The start_time_offset of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._start_time_offset

    @start_time_offset.setter
    def start_time_offset(self, start_time_offset):
        """
        Sets the start_time_offset of this RecordingRecordingChapters.

        :param start_time_offset: The start_time_offset of this RecordingRecordingChapters.
        :type: int
        """

        self._start_time_offset = start_time_offset

    @property
    def end_time_offset(self):
        """
        Gets the end_time_offset of this RecordingRecordingChapters.

        :return: The end_time_offset of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._end_time_offset

    @end_time_offset.setter
    def end_time_offset(self, end_time_offset):
        """
        Sets the end_time_offset of this RecordingRecordingChapters.

        :param end_time_offset: The end_time_offset of this RecordingRecordingChapters.
        :type: int
        """

        self._end_time_offset = end_time_offset

    @property
    def chapter_name(self):
        """
        Gets the chapter_name of this RecordingRecordingChapters.

        :return: The chapter_name of this RecordingRecordingChapters.
        :rtype: str
        """
        return self._chapter_name

    @chapter_name.setter
    def chapter_name(self, chapter_name):
        """
        Sets the chapter_name of this RecordingRecordingChapters.

        :param chapter_name: The chapter_name of this RecordingRecordingChapters.
        :type: str
        """

        self._chapter_name = chapter_name

    @property
    def total_size(self):
        """
        Gets the total_size of this RecordingRecordingChapters.

        :return: The total_size of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """
        Sets the total_size of this RecordingRecordingChapters.

        :param total_size: The total_size of this RecordingRecordingChapters.
        :type: int
        """

        self._total_size = total_size

    @property
    def composite_content_id(self):
        """
        Gets the composite_content_id of this RecordingRecordingChapters.

        :return: The composite_content_id of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._composite_content_id

    @composite_content_id.setter
    def composite_content_id(self, composite_content_id):
        """
        Sets the composite_content_id of this RecordingRecordingChapters.

        :param composite_content_id: The composite_content_id of this RecordingRecordingChapters.
        :type: int
        """

        self._composite_content_id = composite_content_id

    @property
    def composite_content_status(self):
        """
        Gets the composite_content_status of this RecordingRecordingChapters.

        :return: The composite_content_status of this RecordingRecordingChapters.
        :rtype: str
        """
        return self._composite_content_status

    @composite_content_status.setter
    def composite_content_status(self, composite_content_status):
        """
        Sets the composite_content_status of this RecordingRecordingChapters.

        :param composite_content_status: The composite_content_status of this RecordingRecordingChapters.
        :type: str
        """

        self._composite_content_status = composite_content_status

    @property
    def parent_recording_id(self):
        """
        Gets the parent_recording_id of this RecordingRecordingChapters.

        :return: The parent_recording_id of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._parent_recording_id

    @parent_recording_id.setter
    def parent_recording_id(self, parent_recording_id):
        """
        Sets the parent_recording_id of this RecordingRecordingChapters.

        :param parent_recording_id: The parent_recording_id of this RecordingRecordingChapters.
        :type: int
        """

        self._parent_recording_id = parent_recording_id

    @property
    def view_count(self):
        """
        Gets the view_count of this RecordingRecordingChapters.

        :return: The view_count of this RecordingRecordingChapters.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this RecordingRecordingChapters.

        :param view_count: The view_count of this RecordingRecordingChapters.
        :type: int
        """

        self._view_count = view_count

    @property
    def recording_sessions(self):
        """
        Gets the recording_sessions of this RecordingRecordingChapters.

        :return: The recording_sessions of this RecordingRecordingChapters.
        :rtype: list[RecordingSession]
        """
        return self._recording_sessions

    @recording_sessions.setter
    def recording_sessions(self, recording_sessions):
        """
        Sets the recording_sessions of this RecordingRecordingChapters.

        :param recording_sessions: The recording_sessions of this RecordingRecordingChapters.
        :type: list[RecordingSession]
        """

        self._recording_sessions = recording_sessions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RecordingRecordingChapters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
