# coding: utf-8

"""
    BlueJeans onVideo REST API

    _Video That Works Where You Do._  This site provides developers access to API's from BlueJean's onVideo meeting service.  From here you will be able to make actual API calls to manage User Accounts, Meetings, and Recordings.  Also, you can pull analytical data as well retrieve current state information.  With these API's  you should be able to quickly integrate **BlueJeans** video into your applications.     # Authentication All API transactions (excluding Authentication) require an access token per **OAuth standards**.  BlueJeans provides multiple methods for obtaining an access token.  Additionally there are diffferent scopes of token access. ## Grant Types Bluejeans provides 3 different methods for users to Authenticate.  Successful authentication allows BlueJeans to grant an access token to the user. * Authorization Code Grant – Authenticate via a BlueJeans page, and receive an authorization code. Submit authorization with other tokens and receive an access code. (\"three-legged OAuth\") * Password Credentials Grant – Authenticate with a Username and password and receives an access code. (\"two-legged OAuth\"); * Client Credentials Grant – Similar to Password Grant (\"two-legged OAuth\").  ## Access & Permissions BlueJeans defines 3 levels of API access into the system.  When an access token is granted, it carries one of these 3 levels.  The scope of system functionality depends upon the token's access level. * Meeting-level – scope of APIs is limited to individual meetings. * User-level – scope depends on the requested permissions. * App-level – provisioned either by BlueJeans personnel, or the BlueJeans Enterprise Admin, an app, is issued a client key and secret key. These tokens then are used by the BlueJeans Authentication API to receive the token. The token's scope provides access to the entire enterprise and all of its users.  All endpoints in this document that require **Enterprise Admin** access will be marked as such. # Getting Started Before you start using the API's on this site, you must first have a BlueJeans account.  With your BlueJean credentials, use one of the Authentication methods to obtain an access token. - Click on the Authorize button at the top of page - Enter your access token in the field marked \"api_key\" Now the web site will automatically include your access token on all API calls you make. 

    OpenAPI spec version: 1.0.0
    Contact: brandon@bluejeans.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContentContentProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, duration=None, thumbnail=None, thumbnail_sprite=None, hds_url=None, thumbnail_count=None, thumbnail_width=None, thumbnail_height=None, thumbnail_interval=None, hls_url=None, levels=None):
        """
        ContentContentProperties - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'duration': 'int',
            'thumbnail': 'str',
            'thumbnail_sprite': 'str',
            'hds_url': 'str',
            'thumbnail_count': 'int',
            'thumbnail_width': 'int',
            'thumbnail_height': 'int',
            'thumbnail_interval': 'int',
            'hls_url': 'str',
            'levels': 'list[ContentContentPropertiesLevels]'
        }

        self.attribute_map = {
            'duration': 'duration',
            'thumbnail': 'thumbnail',
            'thumbnail_sprite': 'thumbnailSprite',
            'hds_url': 'hdsUrl',
            'thumbnail_count': 'thumbnailCount',
            'thumbnail_width': 'thumbnailWidth',
            'thumbnail_height': 'thumbnailHeight',
            'thumbnail_interval': 'thumbnailInterval',
            'hls_url': 'hlsUrl',
            'levels': 'levels'
        }

        self._duration = duration
        self._thumbnail = thumbnail
        self._thumbnail_sprite = thumbnail_sprite
        self._hds_url = hds_url
        self._thumbnail_count = thumbnail_count
        self._thumbnail_width = thumbnail_width
        self._thumbnail_height = thumbnail_height
        self._thumbnail_interval = thumbnail_interval
        self._hls_url = hls_url
        self._levels = levels

    @property
    def duration(self):
        """
        Gets the duration of this ContentContentProperties.

        :return: The duration of this ContentContentProperties.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this ContentContentProperties.

        :param duration: The duration of this ContentContentProperties.
        :type: int
        """

        self._duration = duration

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this ContentContentProperties.

        :return: The thumbnail of this ContentContentProperties.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this ContentContentProperties.

        :param thumbnail: The thumbnail of this ContentContentProperties.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def thumbnail_sprite(self):
        """
        Gets the thumbnail_sprite of this ContentContentProperties.

        :return: The thumbnail_sprite of this ContentContentProperties.
        :rtype: str
        """
        return self._thumbnail_sprite

    @thumbnail_sprite.setter
    def thumbnail_sprite(self, thumbnail_sprite):
        """
        Sets the thumbnail_sprite of this ContentContentProperties.

        :param thumbnail_sprite: The thumbnail_sprite of this ContentContentProperties.
        :type: str
        """

        self._thumbnail_sprite = thumbnail_sprite

    @property
    def hds_url(self):
        """
        Gets the hds_url of this ContentContentProperties.

        :return: The hds_url of this ContentContentProperties.
        :rtype: str
        """
        return self._hds_url

    @hds_url.setter
    def hds_url(self, hds_url):
        """
        Sets the hds_url of this ContentContentProperties.

        :param hds_url: The hds_url of this ContentContentProperties.
        :type: str
        """

        self._hds_url = hds_url

    @property
    def thumbnail_count(self):
        """
        Gets the thumbnail_count of this ContentContentProperties.

        :return: The thumbnail_count of this ContentContentProperties.
        :rtype: int
        """
        return self._thumbnail_count

    @thumbnail_count.setter
    def thumbnail_count(self, thumbnail_count):
        """
        Sets the thumbnail_count of this ContentContentProperties.

        :param thumbnail_count: The thumbnail_count of this ContentContentProperties.
        :type: int
        """

        self._thumbnail_count = thumbnail_count

    @property
    def thumbnail_width(self):
        """
        Gets the thumbnail_width of this ContentContentProperties.

        :return: The thumbnail_width of this ContentContentProperties.
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """
        Sets the thumbnail_width of this ContentContentProperties.

        :param thumbnail_width: The thumbnail_width of this ContentContentProperties.
        :type: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def thumbnail_height(self):
        """
        Gets the thumbnail_height of this ContentContentProperties.

        :return: The thumbnail_height of this ContentContentProperties.
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """
        Sets the thumbnail_height of this ContentContentProperties.

        :param thumbnail_height: The thumbnail_height of this ContentContentProperties.
        :type: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def thumbnail_interval(self):
        """
        Gets the thumbnail_interval of this ContentContentProperties.

        :return: The thumbnail_interval of this ContentContentProperties.
        :rtype: int
        """
        return self._thumbnail_interval

    @thumbnail_interval.setter
    def thumbnail_interval(self, thumbnail_interval):
        """
        Sets the thumbnail_interval of this ContentContentProperties.

        :param thumbnail_interval: The thumbnail_interval of this ContentContentProperties.
        :type: int
        """

        self._thumbnail_interval = thumbnail_interval

    @property
    def hls_url(self):
        """
        Gets the hls_url of this ContentContentProperties.

        :return: The hls_url of this ContentContentProperties.
        :rtype: str
        """
        return self._hls_url

    @hls_url.setter
    def hls_url(self, hls_url):
        """
        Sets the hls_url of this ContentContentProperties.

        :param hls_url: The hls_url of this ContentContentProperties.
        :type: str
        """

        self._hls_url = hls_url

    @property
    def levels(self):
        """
        Gets the levels of this ContentContentProperties.

        :return: The levels of this ContentContentProperties.
        :rtype: list[ContentContentPropertiesLevels]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """
        Sets the levels of this ContentContentProperties.

        :param levels: The levels of this ContentContentProperties.
        :type: list[ContentContentPropertiesLevels]
        """

        self._levels = levels

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContentContentProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
